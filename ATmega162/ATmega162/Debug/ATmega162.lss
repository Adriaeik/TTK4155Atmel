
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000218  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000ee3  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a52  00000000  00000000  000011ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005db  00000000  00000000  00001c41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000534  00000000  00000000  000023c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004e7  00000000  00000000  000028f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b8  00000000  00000000  00002ddf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e4 e9       	ldi	r30, 0x94	; 148
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  a6:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_19>:
void UART_DisableReceiveInterrupt(void) {
	clearBit(UCSR0B, RXCIE0);
}

// UART mottaksavbrotvektor USART0_RX_vect
ISR(USART0_RXC_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	// Handter mottatt data
	char received = UDR0;
  ba:	8c b1       	in	r24, 0x0c	; 12
	
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:



int main(void) {
	// Initialiser eksternt minne
	externalMemoryInit();
  c8:	0e 94 af 00 	call	0x15e	; 0x15e <externalMemoryInit>

	// Skrive data til SRAM
	SRAM_write(0x1800, 0xAB);  // Skriv 0xAB til adresse 0x1800
  cc:	6b ea       	ldi	r22, 0xAB	; 171
  ce:	70 e0       	ldi	r23, 0x00	; 0
  d0:	80 e0       	ldi	r24, 0x00	; 0
  d2:	98 e1       	ldi	r25, 0x18	; 24
  d4:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
	SRAM_write(0x1801, 0xCD);  // Skriv 0xCD til adresse 0x1801
  d8:	6d ec       	ldi	r22, 0xCD	; 205
  da:	70 e0       	ldi	r23, 0x00	; 0
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	98 e1       	ldi	r25, 0x18	; 24
  e0:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
	//uint8_t data1 = SRAM_read(0x1800);
	//uint8_t data2 = SRAM_read(0x1801);

	while (1) {
		// Skriv 0x01 til adresse 0x1800, som vil sette PA0 høg og slå på LED kobla til PA0
		SRAM_write(0x1800, 0x01);
  e4:	61 e0       	ldi	r22, 0x01	; 1
  e6:	70 e0       	ldi	r23, 0x00	; 0
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	98 e1       	ldi	r25, 0x18	; 24
  ec:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	2f ef       	ldi	r18, 0xFF	; 255
  f2:	8f e7       	ldi	r24, 0x7F	; 127
  f4:	97 e0       	ldi	r25, 0x07	; 7
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	80 40       	sbci	r24, 0x00	; 0
  fa:	90 40       	sbci	r25, 0x00	; 0
  fc:	e1 f7       	brne	.-8      	; 0xf6 <main+0x2e>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <main+0x38>
 100:	00 00       	nop
		_delay_ms(500);  // Vent 500 ms

		// Skriv 0x02 til adresse 0x1800, som vil sette PA1 høg og slå på LED kobla til PA1
		SRAM_write(0x1800, 0x02);
 102:	62 e0       	ldi	r22, 0x02	; 2
 104:	70 e0       	ldi	r23, 0x00	; 0
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	98 e1       	ldi	r25, 0x18	; 24
 10a:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
 10e:	2f ef       	ldi	r18, 0xFF	; 255
 110:	8f e7       	ldi	r24, 0x7F	; 127
 112:	97 e0       	ldi	r25, 0x07	; 7
 114:	21 50       	subi	r18, 0x01	; 1
 116:	80 40       	sbci	r24, 0x00	; 0
 118:	90 40       	sbci	r25, 0x00	; 0
 11a:	e1 f7       	brne	.-8      	; 0x114 <main+0x4c>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <main+0x56>
 11e:	00 00       	nop
		_delay_ms(500);  // Vent 500 ms

		// Skriv 0x00 til adresse 0x1800, som vil slå av begge LED-ar
		SRAM_write(0x1800, 0x00);
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	70 e0       	ldi	r23, 0x00	; 0
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	98 e1       	ldi	r25, 0x18	; 24
 128:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
 12c:	2f ef       	ldi	r18, 0xFF	; 255
 12e:	8f e7       	ldi	r24, 0x7F	; 127
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	21 50       	subi	r18, 0x01	; 1
 134:	80 40       	sbci	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	e1 f7       	brne	.-8      	; 0x132 <main+0x6a>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <main+0x74>
 13c:	00 00       	nop
		_delay_ms(500);  // Vent 500 ms

		// Skriv 0x03 til adresse 0x1800, som vil sette både PA0 og PA1 høg og slå på begge LED-ar
		SRAM_write(0x1800, 0x03);
 13e:	63 e0       	ldi	r22, 0x03	; 3
 140:	70 e0       	ldi	r23, 0x00	; 0
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	98 e1       	ldi	r25, 0x18	; 24
 146:	0e 94 ba 00 	call	0x174	; 0x174 <SRAM_write>
 14a:	2f ef       	ldi	r18, 0xFF	; 255
 14c:	8f e7       	ldi	r24, 0x7F	; 127
 14e:	97 e0       	ldi	r25, 0x07	; 7
 150:	21 50       	subi	r18, 0x01	; 1
 152:	80 40       	sbci	r24, 0x00	; 0
 154:	90 40       	sbci	r25, 0x00	; 0
 156:	e1 f7       	brne	.-8      	; 0x150 <main+0x88>
 158:	00 c0       	rjmp	.+0      	; 0x15a <main+0x92>
 15a:	00 00       	nop
 15c:	c3 cf       	rjmp	.-122    	; 0xe4 <main+0x1c>

0000015e <externalMemoryInit>:
#include "SRAM.h"

// Funksjon for å initialisere det eksterne minnet (SRAM + latch)
void externalMemoryInit(void) {
	// Set Port A (AD0-AD7) og Port C (A8-A15) som utgang for adresse- og databuss
	DDRA = 0xFF;  // PA0-PA7 som utgang
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0xFF;  // PC0-PC7 som utgang
 162:	84 bb       	out	0x14, r24	; 20

	// Set Port D (PD6 og PD7) som utgang for WR og RD signal
	setBit(DDRD, PD6);  // WR
 164:	8e 9a       	sbi	0x11, 6	; 17
	setBit(DDRD, PD7);  // RD
 166:	8f 9a       	sbi	0x11, 7	; 17

	// Set Port E (PE1) som utgang for ALE
	setBit(DDRE, PE1);  // ALE
 168:	31 9a       	sbi	0x06, 1	; 6

	// Aktivere ekstern minnegrensesnitt
	setBit(MCUCR, SRE);   // Enable external SRAM interface
 16a:	85 b7       	in	r24, 0x35	; 53
 16c:	80 68       	ori	r24, 0x80	; 128
 16e:	85 bf       	out	0x35, r24	; 53
	SFIOR = 0x00;         // No wait state
 170:	10 be       	out	0x30, r1	; 48
 172:	08 95       	ret

00000174 <SRAM_write>:
}

// Funksjon for å skrive data til SRAM
void SRAM_write(uint16_t addr, uint8_t data) {
	// Plassere adresse på AD0-AD7 (lavbyte) og A8-A15 (høgbyte)
	PORTA = (uint8_t)(addr & 0xFF);  // AD0-AD7
 174:	8b bb       	out	0x1b, r24	; 27
	PORTC = (uint8_t)((addr >> 8) & 0xFF);  // A8-A15
 176:	95 bb       	out	0x15, r25	; 21

	// Aktivere adresse latch (ALE signal)
	setBit(PORTE, PE1);  // ALE høg
 178:	39 9a       	sbi	0x07, 1	; 7
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17a:	00 c0       	rjmp	.+0      	; 0x17c <SRAM_write+0x8>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <SRAM_write+0xa>
 17e:	00 00       	nop
	_delay_us(1);  // Kort forsinkelse for å sikre at adressa blir fanga opp
	clearBit(PORTE, PE1);  // ALE låg
 180:	39 98       	cbi	0x07, 1	; 7

	// Plassere data på AD0-AD7
	PORTA = data;
 182:	6b bb       	out	0x1b, r22	; 27

	// Skrive data til SRAM (/WR signal)
	clearBit(PORTD, PD6);  // WR låg
 184:	96 98       	cbi	0x12, 6	; 18
 186:	00 c0       	rjmp	.+0      	; 0x188 <SRAM_write+0x14>
 188:	00 c0       	rjmp	.+0      	; 0x18a <SRAM_write+0x16>
 18a:	00 00       	nop
	_delay_us(1);  // Kort forsinkelse for å sikre korrekt skriving
	setBit(PORTD, PD6);   // WR høg
 18c:	96 9a       	sbi	0x12, 6	; 18
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
