
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00000a72  00000b06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080022e  0080022e  00000c34  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c34  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dde  00000000  00000000  00000dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009fe  00000000  00000000  00001b8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000694  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051b  00000000  00000000  00002e50  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ec  00000000  00000000  0000336b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00003857  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e2 e7       	ldi	r30, 0x72	; 114
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 32       	cpi	r26, 0x2E	; 46
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e2       	ldi	r26, 0x2E	; 46
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 33       	cpi	r26, 0x34	; 52
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  a6:	0c 94 37 05 	jmp	0xa6e	; 0xa6e <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <UART_Init>:
	setBit(UCSR0B, RXCIE0);
}

// Deaktiver avbrot for når data blir mottatt
void UART_DisableReceiveInterrupt(void) {
	clearBit(UCSR0B, RXCIE0);
  ae:	90 bd       	out	0x20, r25	; 32
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	54 9a       	sbi	0x0a, 4	; 10
  b4:	53 9a       	sbi	0x0a, 3	; 10
  b6:	8e e8       	ldi	r24, 0x8E	; 142
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <UART_SendChar>:
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <UART_SendChar>
  c0:	8c b9       	out	0x0c, r24	; 12
  c2:	08 95       	ret

000000c4 <UART_putChar>:
  c4:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <UART_ReceiveChar>:
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_ReceiveChar>
  d2:	8c b1       	in	r24, 0x0c	; 12
  d4:	08 95       	ret

000000d6 <UART_getChar>:
  d6:	cf 93       	push	r28
  d8:	0e 94 67 00 	call	0xce	; 0xce <UART_ReceiveChar>
  dc:	c8 2f       	mov	r28, r24
  de:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <URAT_initStudio>:
  ea:	ee e2       	ldi	r30, 0x2E	; 46
  ec:	f2 e0       	ldi	r31, 0x02	; 2
  ee:	82 e1       	ldi	r24, 0x12	; 18
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	93 83       	std	Z+3, r25	; 0x03
  f4:	82 83       	std	Z+2, r24	; 0x02
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <UART_EnableReceiveInterrupt>:
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	08 95       	ret

00000104 <__vector_19>:
}

// UART mottaksavbrotvektor USART0_RX_vect
ISR(USART0_RXC_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	// Handter mottatt data
	char received = UDR0;
 110:	8c b1       	in	r24, 0x0c	; 12
	
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:


int main(void) {
	
	// Initialiser UART med baudrate 9600
	UART_Init(MYUBBR);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 57 00 	call	0xae	; 0xae <UART_Init>
	
	// Initialiser stdio til å bruke UART
	URAT_initStudio();
 126:	0e 94 75 00 	call	0xea	; 0xea <URAT_initStudio>
	// Aktiver mottaksavbrot
	UART_EnableReceiveInterrupt();
 12a:	0e 94 80 00 	call	0x100	; 0x100 <UART_EnableReceiveInterrupt>
	
	// Aktiver globale avbrot
	sei();
 12e:	78 94       	sei
	
	
	//// Initialiser eksternt minne
	
	externalMemoryInit();
 130:	0e 94 3b 01 	call	0x276	; 0x276 <externalMemoryInit>
	
	
	SRAM_test();
 134:	0e 94 b8 00 	call	0x170	; 0x170 <SRAM_test>
	

	while (1) {
		Universal_write(addr, data);
		rdata = Universal_read(addr);
		printf("Reading from: ext_ram[%4d] = %2d \n\r", addr, rdata);
 138:	04 e1       	ldi	r16, 0x14	; 20
 13a:	11 e0       	ldi	r17, 0x01	; 1
 13c:	c0 e2       	ldi	r28, 0x20	; 32
 13e:	d1 e0       	ldi	r29, 0x01	; 1
	uint8_t rdata = 69;
	
	

	while (1) {
		Universal_write(addr, data);
 140:	60 e8       	ldi	r22, 0x80	; 128
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	94 e1       	ldi	r25, 0x14	; 20
 146:	0e 94 4a 01 	call	0x294	; 0x294 <Universal_write>
		rdata = Universal_read(addr);
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	94 e1       	ldi	r25, 0x14	; 20
 14e:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <Universal_read>
		printf("Reading from: ext_ram[%4d] = %2d \n\r", addr, rdata);
 152:	1f 92       	push	r1
 154:	8f 93       	push	r24
 156:	0f 93       	push	r16
 158:	1f 93       	push	r17
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	0e 94 c6 01 	call	0x38c	; 0x38c <printf>
 162:	0f 90       	pop	r0
 164:	0f 90       	pop	r0
 166:	0f 90       	pop	r0
 168:	0f 90       	pop	r0
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	e8 cf       	rjmp	.-48     	; 0x140 <main+0x22>

00000170 <SRAM_test>:
 * Created: 04.09.2024 18:23:23
 *  Author: adriaeik
 */ 
#include "SRAM.h"

void SRAM_test(void) {
 170:	cf 92       	push	r12
 172:	df 92       	push	r13
 174:	ef 92       	push	r14
 176:	ff 92       	push	r15
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // Størrelsen på SRAM (2 KB)
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	
	printf("Starting SRAM test...\n");
 180:	84 e4       	ldi	r24, 0x44	; 68
 182:	91 e0       	ldi	r25, 0x01	; 1
 184:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <puts>
	
	uint16_t seed = rand(); // Genererer eit frø for random-tall
 188:	0e 94 b6 01 	call	0x36c	; 0x36c <rand>
 18c:	7c 01       	movw	r14, r24
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
 18e:	0e 94 bb 01 	call	0x376	; 0x376 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 192:	c1 2c       	mov	r12, r1
 194:	d1 2c       	mov	r13, r1
#include "SRAM.h"

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // Størrelsen på SRAM (2 KB)
	uint16_t write_errors = 0;
 196:	00 e0       	ldi	r16, 0x00	; 0
 198:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand(); // Genererer eit tilfeldig verdi
		ext_ram[i] = some_value;
		uint8_t retrieved_value = ext_ram[i];
		if (retrieved_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 19a:	ca e5       	ldi	r28, 0x5A	; 90
 19c:	d1 e0       	ldi	r29, 0x01	; 1
	uint16_t seed = rand(); // Genererer eit frø for random-tall
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand(); // Genererer eit tilfeldig verdi
 19e:	0e 94 b6 01 	call	0x36c	; 0x36c <rand>
 1a2:	f6 01       	movw	r30, r12
 1a4:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
 1a6:	80 83       	st	Z, r24
		uint8_t retrieved_value = ext_ram[i];
 1a8:	20 81       	ld	r18, Z
		if (retrieved_value != some_value) {
 1aa:	28 17       	cp	r18, r24
 1ac:	a9 f0       	breq	.+42     	; 0x1d8 <SRAM_test+0x68>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 1ae:	99 27       	eor	r25, r25
 1b0:	9f 93       	push	r25
 1b2:	8f 93       	push	r24
 1b4:	1f 92       	push	r1
 1b6:	2f 93       	push	r18
 1b8:	df 92       	push	r13
 1ba:	cf 92       	push	r12
 1bc:	df 93       	push	r29
 1be:	cf 93       	push	r28
 1c0:	0e 94 c6 01 	call	0x38c	; 0x38c <printf>
			write_errors++;
 1c4:	0f 5f       	subi	r16, 0xFF	; 255
 1c6:	1f 4f       	sbci	r17, 0xFF	; 255
 1c8:	8d b7       	in	r24, 0x3d	; 61
 1ca:	9e b7       	in	r25, 0x3e	; 62
 1cc:	08 96       	adiw	r24, 0x08	; 8
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	9e bf       	out	0x3e, r25	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	8d bf       	out	0x3d, r24	; 61
	
	uint16_t seed = rand(); // Genererer eit frø for random-tall
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1d8:	9f ef       	ldi	r25, 0xFF	; 255
 1da:	c9 1a       	sub	r12, r25
 1dc:	d9 0a       	sbc	r13, r25
 1de:	c1 14       	cp	r12, r1
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	d8 06       	cpc	r13, r24
 1e4:	e1 f6       	brne	.-72     	; 0x19e <SRAM_test+0x2e>
			write_errors++;
		}
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for å få same sekvens av random tall
 1e6:	c7 01       	movw	r24, r14
 1e8:	0e 94 bb 01 	call	0x376	; 0x376 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1ec:	c0 e0       	ldi	r28, 0x00	; 0
 1ee:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // Størrelsen på SRAM (2 KB)
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 1f0:	e1 2c       	mov	r14, r1
 1f2:	f1 2c       	mov	r15, r1
	srand(seed); // Resetter PRNG for å få same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retrieved_value = ext_ram[i];
		if (retrieved_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 1f4:	0f 2e       	mov	r0, r31
 1f6:	f4 e9       	ldi	r31, 0x94	; 148
 1f8:	cf 2e       	mov	r12, r31
 1fa:	f1 e0       	ldi	r31, 0x01	; 1
 1fc:	df 2e       	mov	r13, r31
 1fe:	f0 2d       	mov	r31, r0
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for å få same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 200:	0e 94 b6 01 	call	0x36c	; 0x36c <rand>
 204:	fe 01       	movw	r30, r28
 206:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retrieved_value = ext_ram[i];
 208:	20 81       	ld	r18, Z
		if (retrieved_value != some_value) {
 20a:	28 17       	cp	r18, r24
 20c:	b1 f0       	breq	.+44     	; 0x23a <SRAM_test+0xca>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 20e:	99 27       	eor	r25, r25
 210:	9f 93       	push	r25
 212:	8f 93       	push	r24
 214:	1f 92       	push	r1
 216:	2f 93       	push	r18
 218:	df 93       	push	r29
 21a:	cf 93       	push	r28
 21c:	df 92       	push	r13
 21e:	cf 92       	push	r12
 220:	0e 94 c6 01 	call	0x38c	; 0x38c <printf>
			retrieval_errors++;
 224:	9f ef       	ldi	r25, 0xFF	; 255
 226:	e9 1a       	sub	r14, r25
 228:	f9 0a       	sbc	r15, r25
 22a:	8d b7       	in	r24, 0x3d	; 61
 22c:	9e b7       	in	r25, 0x3e	; 62
 22e:	08 96       	adiw	r24, 0x08	; 8
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	9e bf       	out	0x3e, r25	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	8d bf       	out	0x3d, r24	; 61
		}
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for å få same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c1 15       	cp	r28, r1
 23e:	98 e0       	ldi	r25, 0x08	; 8
 240:	d9 07       	cpc	r29, r25
 242:	f1 f6       	brne	.-68     	; 0x200 <SRAM_test+0x90>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
 244:	ff 92       	push	r15
 246:	ef 92       	push	r14
 248:	1f 93       	push	r17
 24a:	0f 93       	push	r16
 24c:	82 ed       	ldi	r24, 0xD2	; 210
 24e:	91 e0       	ldi	r25, 0x01	; 1
 250:	9f 93       	push	r25
 252:	8f 93       	push	r24
 254:	0e 94 c6 01 	call	0x38c	; 0x38c <printf>
}
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
 264:	df 91       	pop	r29
 266:	cf 91       	pop	r28
 268:	1f 91       	pop	r17
 26a:	0f 91       	pop	r16
 26c:	ff 90       	pop	r15
 26e:	ef 90       	pop	r14
 270:	df 90       	pop	r13
 272:	cf 90       	pop	r12
 274:	08 95       	ret

00000276 <externalMemoryInit>:
	volatile char *ext_ram = (char *) SRAM_START; // Startadresse for SRAM
	uint16_t ext_ram_size = SRAM_SIZE; // Størrelsen på SRAM (2 KB)
	uint8_t data = ext_ram[addr];
	
	return data;
}
 276:	8f ef       	ldi	r24, 0xFF	; 255
 278:	8a bb       	out	0x1a, r24	; 26
 27a:	8f e0       	ldi	r24, 0x0F	; 15
 27c:	84 bb       	out	0x14, r24	; 20
 27e:	8e 9a       	sbi	0x11, 6	; 17
 280:	8f 9a       	sbi	0x11, 7	; 17
 282:	31 9a       	sbi	0x06, 1	; 6
 284:	85 b7       	in	r24, 0x35	; 53
 286:	80 68       	ori	r24, 0x80	; 128
 288:	85 bf       	out	0x35, r24	; 53
 28a:	10 be       	out	0x30, r1	; 48
 28c:	80 b7       	in	r24, 0x30	; 48
 28e:	80 62       	ori	r24, 0x20	; 32
 290:	80 bf       	out	0x30, r24	; 48
 292:	08 95       	ret

00000294 <Universal_write>:

// Funksjon for å skrive data til SRAM
void Universal_write(volatile uint16_t addr, uint8_t data) {
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
 298:	00 d0       	rcall	.+0      	; 0x29a <Universal_write+0x6>
 29a:	cd b7       	in	r28, 0x3d	; 61
 29c:	de b7       	in	r29, 0x3e	; 62
 29e:	9a 83       	std	Y+2, r25	; 0x02
 2a0:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) OLED_START; // Startadresse for SRAM
	ext_ram[addr] = data;
 2a2:	e9 81       	ldd	r30, Y+1	; 0x01
 2a4:	fa 81       	ldd	r31, Y+2	; 0x02
 2a6:	f0 5f       	subi	r31, 0xF0	; 240
 2a8:	60 83       	st	Z, r22
		
}
 2aa:	0f 90       	pop	r0
 2ac:	0f 90       	pop	r0
 2ae:	df 91       	pop	r29
 2b0:	cf 91       	pop	r28
 2b2:	08 95       	ret

000002b4 <Universal_read>:

// Funksjon for å lese data frå SRAM
uint8_t Universal_read(volatile uint16_t addr) {
 2b4:	cf 93       	push	r28
 2b6:	df 93       	push	r29
 2b8:	00 d0       	rcall	.+0      	; 0x2ba <Universal_read+0x6>
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) OLED_START; // Startadresse for SRAM
	uint8_t data = ext_ram[addr];
 2c2:	e9 81       	ldd	r30, Y+1	; 0x01
 2c4:	fa 81       	ldd	r31, Y+2	; 0x02
 2c6:	f0 5f       	subi	r31, 0xF0	; 240
 2c8:	80 81       	ld	r24, Z
	
	return data;
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	df 91       	pop	r29
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <do_rand>:
 2d4:	8f 92       	push	r8
 2d6:	9f 92       	push	r9
 2d8:	af 92       	push	r10
 2da:	bf 92       	push	r11
 2dc:	cf 92       	push	r12
 2de:	df 92       	push	r13
 2e0:	ef 92       	push	r14
 2e2:	ff 92       	push	r15
 2e4:	cf 93       	push	r28
 2e6:	df 93       	push	r29
 2e8:	ec 01       	movw	r28, r24
 2ea:	68 81       	ld	r22, Y
 2ec:	79 81       	ldd	r23, Y+1	; 0x01
 2ee:	8a 81       	ldd	r24, Y+2	; 0x02
 2f0:	9b 81       	ldd	r25, Y+3	; 0x03
 2f2:	61 15       	cp	r22, r1
 2f4:	71 05       	cpc	r23, r1
 2f6:	81 05       	cpc	r24, r1
 2f8:	91 05       	cpc	r25, r1
 2fa:	21 f4       	brne	.+8      	; 0x304 <do_rand+0x30>
 2fc:	64 e2       	ldi	r22, 0x24	; 36
 2fe:	79 ed       	ldi	r23, 0xD9	; 217
 300:	8b e5       	ldi	r24, 0x5B	; 91
 302:	97 e0       	ldi	r25, 0x07	; 7
 304:	2d e1       	ldi	r18, 0x1D	; 29
 306:	33 ef       	ldi	r19, 0xF3	; 243
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	50 e0       	ldi	r21, 0x00	; 0
 30c:	0e 94 9d 04 	call	0x93a	; 0x93a <__divmodsi4>
 310:	49 01       	movw	r8, r18
 312:	5a 01       	movw	r10, r20
 314:	9b 01       	movw	r18, r22
 316:	ac 01       	movw	r20, r24
 318:	a7 ea       	ldi	r26, 0xA7	; 167
 31a:	b1 e4       	ldi	r27, 0x41	; 65
 31c:	0e 94 bc 04 	call	0x978	; 0x978 <__muluhisi3>
 320:	6b 01       	movw	r12, r22
 322:	7c 01       	movw	r14, r24
 324:	ac ee       	ldi	r26, 0xEC	; 236
 326:	b4 ef       	ldi	r27, 0xF4	; 244
 328:	a5 01       	movw	r20, r10
 32a:	94 01       	movw	r18, r8
 32c:	0e 94 ca 04 	call	0x994	; 0x994 <__mulohisi3>
 330:	dc 01       	movw	r26, r24
 332:	cb 01       	movw	r24, r22
 334:	8c 0d       	add	r24, r12
 336:	9d 1d       	adc	r25, r13
 338:	ae 1d       	adc	r26, r14
 33a:	bf 1d       	adc	r27, r15
 33c:	b7 ff       	sbrs	r27, 7
 33e:	03 c0       	rjmp	.+6      	; 0x346 <do_rand+0x72>
 340:	01 97       	sbiw	r24, 0x01	; 1
 342:	a1 09       	sbc	r26, r1
 344:	b0 48       	sbci	r27, 0x80	; 128
 346:	88 83       	st	Y, r24
 348:	99 83       	std	Y+1, r25	; 0x01
 34a:	aa 83       	std	Y+2, r26	; 0x02
 34c:	bb 83       	std	Y+3, r27	; 0x03
 34e:	9f 77       	andi	r25, 0x7F	; 127
 350:	df 91       	pop	r29
 352:	cf 91       	pop	r28
 354:	ff 90       	pop	r15
 356:	ef 90       	pop	r14
 358:	df 90       	pop	r13
 35a:	cf 90       	pop	r12
 35c:	bf 90       	pop	r11
 35e:	af 90       	pop	r10
 360:	9f 90       	pop	r9
 362:	8f 90       	pop	r8
 364:	08 95       	ret

00000366 <rand_r>:
 366:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <do_rand>
 36a:	08 95       	ret

0000036c <rand>:
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	91 e0       	ldi	r25, 0x01	; 1
 370:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <do_rand>
 374:	08 95       	ret

00000376 <srand>:
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 37e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
 382:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
 386:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
 38a:	08 95       	ret

0000038c <printf>:
 38c:	a0 e0       	ldi	r26, 0x00	; 0
 38e:	b0 e0       	ldi	r27, 0x00	; 0
 390:	ec ec       	ldi	r30, 0xCC	; 204
 392:	f1 e0       	ldi	r31, 0x01	; 1
 394:	0c 94 df 04 	jmp	0x9be	; 0x9be <__prologue_saves__+0x20>
 398:	ae 01       	movw	r20, r28
 39a:	4b 5f       	subi	r20, 0xFB	; 251
 39c:	5f 4f       	sbci	r21, 0xFF	; 255
 39e:	fa 01       	movw	r30, r20
 3a0:	61 91       	ld	r22, Z+
 3a2:	71 91       	ld	r23, Z+
 3a4:	af 01       	movw	r20, r30
 3a6:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end+0x2>
 3aa:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <__data_end+0x3>
 3ae:	0e 94 0c 02 	call	0x418	; 0x418 <vfprintf>
 3b2:	e2 e0       	ldi	r30, 0x02	; 2
 3b4:	0c 94 fb 04 	jmp	0x9f6	; 0x9f6 <__epilogue_restores__+0x20>

000003b8 <puts>:
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end+0x2>
 3c4:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x3>
 3c8:	23 81       	ldd	r18, Z+3	; 0x03
 3ca:	21 ff       	sbrs	r18, 1
 3cc:	1b c0       	rjmp	.+54     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ce:	8c 01       	movw	r16, r24
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	f8 01       	movw	r30, r16
 3d6:	81 91       	ld	r24, Z+
 3d8:	8f 01       	movw	r16, r30
 3da:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end+0x2>
 3de:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x3>
 3e2:	db 01       	movw	r26, r22
 3e4:	18 96       	adiw	r26, 0x08	; 8
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	19 97       	sbiw	r26, 0x09	; 9
 3ec:	88 23       	and	r24, r24
 3ee:	31 f0       	breq	.+12     	; 0x3fc <puts+0x44>
 3f0:	09 95       	icall
 3f2:	89 2b       	or	r24, r25
 3f4:	79 f3       	breq	.-34     	; 0x3d4 <puts+0x1c>
 3f6:	df ef       	ldi	r29, 0xFF	; 255
 3f8:	cf ef       	ldi	r28, 0xFF	; 255
 3fa:	ec cf       	rjmp	.-40     	; 0x3d4 <puts+0x1c>
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	09 95       	icall
 400:	89 2b       	or	r24, r25
 402:	19 f0       	breq	.+6      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	02 c0       	rjmp	.+4      	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
 40a:	8d 2f       	mov	r24, r29
 40c:	9c 2f       	mov	r25, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000418 <vfprintf>:
 418:	ab e0       	ldi	r26, 0x0B	; 11
 41a:	b0 e0       	ldi	r27, 0x00	; 0
 41c:	e2 e1       	ldi	r30, 0x12	; 18
 41e:	f2 e0       	ldi	r31, 0x02	; 2
 420:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__prologue_saves__>
 424:	6c 01       	movw	r12, r24
 426:	7b 01       	movw	r14, r22
 428:	8a 01       	movw	r16, r20
 42a:	fc 01       	movw	r30, r24
 42c:	17 82       	std	Z+7, r1	; 0x07
 42e:	16 82       	std	Z+6, r1	; 0x06
 430:	83 81       	ldd	r24, Z+3	; 0x03
 432:	81 ff       	sbrs	r24, 1
 434:	cc c1       	rjmp	.+920    	; 0x7ce <__stack+0x2cf>
 436:	ce 01       	movw	r24, r28
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	3c 01       	movw	r6, r24
 43c:	f6 01       	movw	r30, r12
 43e:	93 81       	ldd	r25, Z+3	; 0x03
 440:	f7 01       	movw	r30, r14
 442:	93 fd       	sbrc	r25, 3
 444:	85 91       	lpm	r24, Z+
 446:	93 ff       	sbrs	r25, 3
 448:	81 91       	ld	r24, Z+
 44a:	7f 01       	movw	r14, r30
 44c:	88 23       	and	r24, r24
 44e:	09 f4       	brne	.+2      	; 0x452 <vfprintf+0x3a>
 450:	ba c1       	rjmp	.+884    	; 0x7c6 <__stack+0x2c7>
 452:	85 32       	cpi	r24, 0x25	; 37
 454:	39 f4       	brne	.+14     	; 0x464 <vfprintf+0x4c>
 456:	93 fd       	sbrc	r25, 3
 458:	85 91       	lpm	r24, Z+
 45a:	93 ff       	sbrs	r25, 3
 45c:	81 91       	ld	r24, Z+
 45e:	7f 01       	movw	r14, r30
 460:	85 32       	cpi	r24, 0x25	; 37
 462:	29 f4       	brne	.+10     	; 0x46e <vfprintf+0x56>
 464:	b6 01       	movw	r22, r12
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 46c:	e7 cf       	rjmp	.-50     	; 0x43c <vfprintf+0x24>
 46e:	91 2c       	mov	r9, r1
 470:	21 2c       	mov	r2, r1
 472:	31 2c       	mov	r3, r1
 474:	ff e1       	ldi	r31, 0x1F	; 31
 476:	f3 15       	cp	r31, r3
 478:	d8 f0       	brcs	.+54     	; 0x4b0 <vfprintf+0x98>
 47a:	8b 32       	cpi	r24, 0x2B	; 43
 47c:	79 f0       	breq	.+30     	; 0x49c <vfprintf+0x84>
 47e:	38 f4       	brcc	.+14     	; 0x48e <vfprintf+0x76>
 480:	80 32       	cpi	r24, 0x20	; 32
 482:	79 f0       	breq	.+30     	; 0x4a2 <vfprintf+0x8a>
 484:	83 32       	cpi	r24, 0x23	; 35
 486:	a1 f4       	brne	.+40     	; 0x4b0 <vfprintf+0x98>
 488:	23 2d       	mov	r18, r3
 48a:	20 61       	ori	r18, 0x10	; 16
 48c:	1d c0       	rjmp	.+58     	; 0x4c8 <vfprintf+0xb0>
 48e:	8d 32       	cpi	r24, 0x2D	; 45
 490:	61 f0       	breq	.+24     	; 0x4aa <vfprintf+0x92>
 492:	80 33       	cpi	r24, 0x30	; 48
 494:	69 f4       	brne	.+26     	; 0x4b0 <vfprintf+0x98>
 496:	23 2d       	mov	r18, r3
 498:	21 60       	ori	r18, 0x01	; 1
 49a:	16 c0       	rjmp	.+44     	; 0x4c8 <vfprintf+0xb0>
 49c:	83 2d       	mov	r24, r3
 49e:	82 60       	ori	r24, 0x02	; 2
 4a0:	38 2e       	mov	r3, r24
 4a2:	e3 2d       	mov	r30, r3
 4a4:	e4 60       	ori	r30, 0x04	; 4
 4a6:	3e 2e       	mov	r3, r30
 4a8:	2a c0       	rjmp	.+84     	; 0x4fe <vfprintf+0xe6>
 4aa:	f3 2d       	mov	r31, r3
 4ac:	f8 60       	ori	r31, 0x08	; 8
 4ae:	1d c0       	rjmp	.+58     	; 0x4ea <vfprintf+0xd2>
 4b0:	37 fc       	sbrc	r3, 7
 4b2:	2d c0       	rjmp	.+90     	; 0x50e <__stack+0xf>
 4b4:	20 ed       	ldi	r18, 0xD0	; 208
 4b6:	28 0f       	add	r18, r24
 4b8:	2a 30       	cpi	r18, 0x0A	; 10
 4ba:	40 f0       	brcs	.+16     	; 0x4cc <vfprintf+0xb4>
 4bc:	8e 32       	cpi	r24, 0x2E	; 46
 4be:	b9 f4       	brne	.+46     	; 0x4ee <vfprintf+0xd6>
 4c0:	36 fc       	sbrc	r3, 6
 4c2:	81 c1       	rjmp	.+770    	; 0x7c6 <__stack+0x2c7>
 4c4:	23 2d       	mov	r18, r3
 4c6:	20 64       	ori	r18, 0x40	; 64
 4c8:	32 2e       	mov	r3, r18
 4ca:	19 c0       	rjmp	.+50     	; 0x4fe <vfprintf+0xe6>
 4cc:	36 fe       	sbrs	r3, 6
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <vfprintf+0xc4>
 4d0:	8a e0       	ldi	r24, 0x0A	; 10
 4d2:	98 9e       	mul	r9, r24
 4d4:	20 0d       	add	r18, r0
 4d6:	11 24       	eor	r1, r1
 4d8:	92 2e       	mov	r9, r18
 4da:	11 c0       	rjmp	.+34     	; 0x4fe <vfprintf+0xe6>
 4dc:	ea e0       	ldi	r30, 0x0A	; 10
 4de:	2e 9e       	mul	r2, r30
 4e0:	20 0d       	add	r18, r0
 4e2:	11 24       	eor	r1, r1
 4e4:	22 2e       	mov	r2, r18
 4e6:	f3 2d       	mov	r31, r3
 4e8:	f0 62       	ori	r31, 0x20	; 32
 4ea:	3f 2e       	mov	r3, r31
 4ec:	08 c0       	rjmp	.+16     	; 0x4fe <vfprintf+0xe6>
 4ee:	8c 36       	cpi	r24, 0x6C	; 108
 4f0:	21 f4       	brne	.+8      	; 0x4fa <vfprintf+0xe2>
 4f2:	83 2d       	mov	r24, r3
 4f4:	80 68       	ori	r24, 0x80	; 128
 4f6:	38 2e       	mov	r3, r24
 4f8:	02 c0       	rjmp	.+4      	; 0x4fe <vfprintf+0xe6>
 4fa:	88 36       	cpi	r24, 0x68	; 104
 4fc:	41 f4       	brne	.+16     	; 0x50e <__stack+0xf>
 4fe:	f7 01       	movw	r30, r14
 500:	93 fd       	sbrc	r25, 3
 502:	85 91       	lpm	r24, Z+
 504:	93 ff       	sbrs	r25, 3
 506:	81 91       	ld	r24, Z+
 508:	7f 01       	movw	r14, r30
 50a:	81 11       	cpse	r24, r1
 50c:	b3 cf       	rjmp	.-154    	; 0x474 <vfprintf+0x5c>
 50e:	98 2f       	mov	r25, r24
 510:	9f 7d       	andi	r25, 0xDF	; 223
 512:	95 54       	subi	r25, 0x45	; 69
 514:	93 30       	cpi	r25, 0x03	; 3
 516:	28 f4       	brcc	.+10     	; 0x522 <__stack+0x23>
 518:	0c 5f       	subi	r16, 0xFC	; 252
 51a:	1f 4f       	sbci	r17, 0xFF	; 255
 51c:	9f e3       	ldi	r25, 0x3F	; 63
 51e:	99 83       	std	Y+1, r25	; 0x01
 520:	0d c0       	rjmp	.+26     	; 0x53c <__stack+0x3d>
 522:	83 36       	cpi	r24, 0x63	; 99
 524:	31 f0       	breq	.+12     	; 0x532 <__stack+0x33>
 526:	83 37       	cpi	r24, 0x73	; 115
 528:	71 f0       	breq	.+28     	; 0x546 <__stack+0x47>
 52a:	83 35       	cpi	r24, 0x53	; 83
 52c:	09 f0       	breq	.+2      	; 0x530 <__stack+0x31>
 52e:	59 c0       	rjmp	.+178    	; 0x5e2 <__stack+0xe3>
 530:	21 c0       	rjmp	.+66     	; 0x574 <__stack+0x75>
 532:	f8 01       	movw	r30, r16
 534:	80 81       	ld	r24, Z
 536:	89 83       	std	Y+1, r24	; 0x01
 538:	0e 5f       	subi	r16, 0xFE	; 254
 53a:	1f 4f       	sbci	r17, 0xFF	; 255
 53c:	88 24       	eor	r8, r8
 53e:	83 94       	inc	r8
 540:	91 2c       	mov	r9, r1
 542:	53 01       	movw	r10, r6
 544:	13 c0       	rjmp	.+38     	; 0x56c <__stack+0x6d>
 546:	28 01       	movw	r4, r16
 548:	f2 e0       	ldi	r31, 0x02	; 2
 54a:	4f 0e       	add	r4, r31
 54c:	51 1c       	adc	r5, r1
 54e:	f8 01       	movw	r30, r16
 550:	a0 80       	ld	r10, Z
 552:	b1 80       	ldd	r11, Z+1	; 0x01
 554:	36 fe       	sbrs	r3, 6
 556:	03 c0       	rjmp	.+6      	; 0x55e <__stack+0x5f>
 558:	69 2d       	mov	r22, r9
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	02 c0       	rjmp	.+4      	; 0x562 <__stack+0x63>
 55e:	6f ef       	ldi	r22, 0xFF	; 255
 560:	7f ef       	ldi	r23, 0xFF	; 255
 562:	c5 01       	movw	r24, r10
 564:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <strnlen>
 568:	4c 01       	movw	r8, r24
 56a:	82 01       	movw	r16, r4
 56c:	f3 2d       	mov	r31, r3
 56e:	ff 77       	andi	r31, 0x7F	; 127
 570:	3f 2e       	mov	r3, r31
 572:	16 c0       	rjmp	.+44     	; 0x5a0 <__stack+0xa1>
 574:	28 01       	movw	r4, r16
 576:	22 e0       	ldi	r18, 0x02	; 2
 578:	42 0e       	add	r4, r18
 57a:	51 1c       	adc	r5, r1
 57c:	f8 01       	movw	r30, r16
 57e:	a0 80       	ld	r10, Z
 580:	b1 80       	ldd	r11, Z+1	; 0x01
 582:	36 fe       	sbrs	r3, 6
 584:	03 c0       	rjmp	.+6      	; 0x58c <__stack+0x8d>
 586:	69 2d       	mov	r22, r9
 588:	70 e0       	ldi	r23, 0x00	; 0
 58a:	02 c0       	rjmp	.+4      	; 0x590 <__stack+0x91>
 58c:	6f ef       	ldi	r22, 0xFF	; 255
 58e:	7f ef       	ldi	r23, 0xFF	; 255
 590:	c5 01       	movw	r24, r10
 592:	0e 94 ed 03 	call	0x7da	; 0x7da <strnlen_P>
 596:	4c 01       	movw	r8, r24
 598:	f3 2d       	mov	r31, r3
 59a:	f0 68       	ori	r31, 0x80	; 128
 59c:	3f 2e       	mov	r3, r31
 59e:	82 01       	movw	r16, r4
 5a0:	33 fc       	sbrc	r3, 3
 5a2:	1b c0       	rjmp	.+54     	; 0x5da <__stack+0xdb>
 5a4:	82 2d       	mov	r24, r2
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	88 16       	cp	r8, r24
 5aa:	99 06       	cpc	r9, r25
 5ac:	b0 f4       	brcc	.+44     	; 0x5da <__stack+0xdb>
 5ae:	b6 01       	movw	r22, r12
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 5b8:	2a 94       	dec	r2
 5ba:	f4 cf       	rjmp	.-24     	; 0x5a4 <__stack+0xa5>
 5bc:	f5 01       	movw	r30, r10
 5be:	37 fc       	sbrc	r3, 7
 5c0:	85 91       	lpm	r24, Z+
 5c2:	37 fe       	sbrs	r3, 7
 5c4:	81 91       	ld	r24, Z+
 5c6:	5f 01       	movw	r10, r30
 5c8:	b6 01       	movw	r22, r12
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 5d0:	21 10       	cpse	r2, r1
 5d2:	2a 94       	dec	r2
 5d4:	21 e0       	ldi	r18, 0x01	; 1
 5d6:	82 1a       	sub	r8, r18
 5d8:	91 08       	sbc	r9, r1
 5da:	81 14       	cp	r8, r1
 5dc:	91 04       	cpc	r9, r1
 5de:	71 f7       	brne	.-36     	; 0x5bc <__stack+0xbd>
 5e0:	e8 c0       	rjmp	.+464    	; 0x7b2 <__stack+0x2b3>
 5e2:	84 36       	cpi	r24, 0x64	; 100
 5e4:	11 f0       	breq	.+4      	; 0x5ea <__stack+0xeb>
 5e6:	89 36       	cpi	r24, 0x69	; 105
 5e8:	41 f5       	brne	.+80     	; 0x63a <__stack+0x13b>
 5ea:	f8 01       	movw	r30, r16
 5ec:	37 fe       	sbrs	r3, 7
 5ee:	07 c0       	rjmp	.+14     	; 0x5fe <__stack+0xff>
 5f0:	60 81       	ld	r22, Z
 5f2:	71 81       	ldd	r23, Z+1	; 0x01
 5f4:	82 81       	ldd	r24, Z+2	; 0x02
 5f6:	93 81       	ldd	r25, Z+3	; 0x03
 5f8:	0c 5f       	subi	r16, 0xFC	; 252
 5fa:	1f 4f       	sbci	r17, 0xFF	; 255
 5fc:	08 c0       	rjmp	.+16     	; 0x60e <__stack+0x10f>
 5fe:	60 81       	ld	r22, Z
 600:	71 81       	ldd	r23, Z+1	; 0x01
 602:	07 2e       	mov	r0, r23
 604:	00 0c       	add	r0, r0
 606:	88 0b       	sbc	r24, r24
 608:	99 0b       	sbc	r25, r25
 60a:	0e 5f       	subi	r16, 0xFE	; 254
 60c:	1f 4f       	sbci	r17, 0xFF	; 255
 60e:	f3 2d       	mov	r31, r3
 610:	ff 76       	andi	r31, 0x6F	; 111
 612:	3f 2e       	mov	r3, r31
 614:	97 ff       	sbrs	r25, 7
 616:	09 c0       	rjmp	.+18     	; 0x62a <__stack+0x12b>
 618:	90 95       	com	r25
 61a:	80 95       	com	r24
 61c:	70 95       	com	r23
 61e:	61 95       	neg	r22
 620:	7f 4f       	sbci	r23, 0xFF	; 255
 622:	8f 4f       	sbci	r24, 0xFF	; 255
 624:	9f 4f       	sbci	r25, 0xFF	; 255
 626:	f0 68       	ori	r31, 0x80	; 128
 628:	3f 2e       	mov	r3, r31
 62a:	2a e0       	ldi	r18, 0x0A	; 10
 62c:	30 e0       	ldi	r19, 0x00	; 0
 62e:	a3 01       	movw	r20, r6
 630:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 634:	88 2e       	mov	r8, r24
 636:	86 18       	sub	r8, r6
 638:	45 c0       	rjmp	.+138    	; 0x6c4 <__stack+0x1c5>
 63a:	85 37       	cpi	r24, 0x75	; 117
 63c:	31 f4       	brne	.+12     	; 0x64a <__stack+0x14b>
 63e:	23 2d       	mov	r18, r3
 640:	2f 7e       	andi	r18, 0xEF	; 239
 642:	b2 2e       	mov	r11, r18
 644:	2a e0       	ldi	r18, 0x0A	; 10
 646:	30 e0       	ldi	r19, 0x00	; 0
 648:	25 c0       	rjmp	.+74     	; 0x694 <__stack+0x195>
 64a:	93 2d       	mov	r25, r3
 64c:	99 7f       	andi	r25, 0xF9	; 249
 64e:	b9 2e       	mov	r11, r25
 650:	8f 36       	cpi	r24, 0x6F	; 111
 652:	c1 f0       	breq	.+48     	; 0x684 <__stack+0x185>
 654:	18 f4       	brcc	.+6      	; 0x65c <__stack+0x15d>
 656:	88 35       	cpi	r24, 0x58	; 88
 658:	79 f0       	breq	.+30     	; 0x678 <__stack+0x179>
 65a:	b5 c0       	rjmp	.+362    	; 0x7c6 <__stack+0x2c7>
 65c:	80 37       	cpi	r24, 0x70	; 112
 65e:	19 f0       	breq	.+6      	; 0x666 <__stack+0x167>
 660:	88 37       	cpi	r24, 0x78	; 120
 662:	21 f0       	breq	.+8      	; 0x66c <__stack+0x16d>
 664:	b0 c0       	rjmp	.+352    	; 0x7c6 <__stack+0x2c7>
 666:	e9 2f       	mov	r30, r25
 668:	e0 61       	ori	r30, 0x10	; 16
 66a:	be 2e       	mov	r11, r30
 66c:	b4 fe       	sbrs	r11, 4
 66e:	0d c0       	rjmp	.+26     	; 0x68a <__stack+0x18b>
 670:	fb 2d       	mov	r31, r11
 672:	f4 60       	ori	r31, 0x04	; 4
 674:	bf 2e       	mov	r11, r31
 676:	09 c0       	rjmp	.+18     	; 0x68a <__stack+0x18b>
 678:	34 fe       	sbrs	r3, 4
 67a:	0a c0       	rjmp	.+20     	; 0x690 <__stack+0x191>
 67c:	29 2f       	mov	r18, r25
 67e:	26 60       	ori	r18, 0x06	; 6
 680:	b2 2e       	mov	r11, r18
 682:	06 c0       	rjmp	.+12     	; 0x690 <__stack+0x191>
 684:	28 e0       	ldi	r18, 0x08	; 8
 686:	30 e0       	ldi	r19, 0x00	; 0
 688:	05 c0       	rjmp	.+10     	; 0x694 <__stack+0x195>
 68a:	20 e1       	ldi	r18, 0x10	; 16
 68c:	30 e0       	ldi	r19, 0x00	; 0
 68e:	02 c0       	rjmp	.+4      	; 0x694 <__stack+0x195>
 690:	20 e1       	ldi	r18, 0x10	; 16
 692:	32 e0       	ldi	r19, 0x02	; 2
 694:	f8 01       	movw	r30, r16
 696:	b7 fe       	sbrs	r11, 7
 698:	07 c0       	rjmp	.+14     	; 0x6a8 <__stack+0x1a9>
 69a:	60 81       	ld	r22, Z
 69c:	71 81       	ldd	r23, Z+1	; 0x01
 69e:	82 81       	ldd	r24, Z+2	; 0x02
 6a0:	93 81       	ldd	r25, Z+3	; 0x03
 6a2:	0c 5f       	subi	r16, 0xFC	; 252
 6a4:	1f 4f       	sbci	r17, 0xFF	; 255
 6a6:	06 c0       	rjmp	.+12     	; 0x6b4 <__stack+0x1b5>
 6a8:	60 81       	ld	r22, Z
 6aa:	71 81       	ldd	r23, Z+1	; 0x01
 6ac:	80 e0       	ldi	r24, 0x00	; 0
 6ae:	90 e0       	ldi	r25, 0x00	; 0
 6b0:	0e 5f       	subi	r16, 0xFE	; 254
 6b2:	1f 4f       	sbci	r17, 0xFF	; 255
 6b4:	a3 01       	movw	r20, r6
 6b6:	0e 94 3f 04 	call	0x87e	; 0x87e <__ultoa_invert>
 6ba:	88 2e       	mov	r8, r24
 6bc:	86 18       	sub	r8, r6
 6be:	fb 2d       	mov	r31, r11
 6c0:	ff 77       	andi	r31, 0x7F	; 127
 6c2:	3f 2e       	mov	r3, r31
 6c4:	36 fe       	sbrs	r3, 6
 6c6:	0d c0       	rjmp	.+26     	; 0x6e2 <__stack+0x1e3>
 6c8:	23 2d       	mov	r18, r3
 6ca:	2e 7f       	andi	r18, 0xFE	; 254
 6cc:	a2 2e       	mov	r10, r18
 6ce:	89 14       	cp	r8, r9
 6d0:	58 f4       	brcc	.+22     	; 0x6e8 <__stack+0x1e9>
 6d2:	34 fe       	sbrs	r3, 4
 6d4:	0b c0       	rjmp	.+22     	; 0x6ec <__stack+0x1ed>
 6d6:	32 fc       	sbrc	r3, 2
 6d8:	09 c0       	rjmp	.+18     	; 0x6ec <__stack+0x1ed>
 6da:	83 2d       	mov	r24, r3
 6dc:	8e 7e       	andi	r24, 0xEE	; 238
 6de:	a8 2e       	mov	r10, r24
 6e0:	05 c0       	rjmp	.+10     	; 0x6ec <__stack+0x1ed>
 6e2:	b8 2c       	mov	r11, r8
 6e4:	a3 2c       	mov	r10, r3
 6e6:	03 c0       	rjmp	.+6      	; 0x6ee <__stack+0x1ef>
 6e8:	b8 2c       	mov	r11, r8
 6ea:	01 c0       	rjmp	.+2      	; 0x6ee <__stack+0x1ef>
 6ec:	b9 2c       	mov	r11, r9
 6ee:	a4 fe       	sbrs	r10, 4
 6f0:	0f c0       	rjmp	.+30     	; 0x710 <__stack+0x211>
 6f2:	fe 01       	movw	r30, r28
 6f4:	e8 0d       	add	r30, r8
 6f6:	f1 1d       	adc	r31, r1
 6f8:	80 81       	ld	r24, Z
 6fa:	80 33       	cpi	r24, 0x30	; 48
 6fc:	21 f4       	brne	.+8      	; 0x706 <__stack+0x207>
 6fe:	9a 2d       	mov	r25, r10
 700:	99 7e       	andi	r25, 0xE9	; 233
 702:	a9 2e       	mov	r10, r25
 704:	09 c0       	rjmp	.+18     	; 0x718 <__stack+0x219>
 706:	a2 fe       	sbrs	r10, 2
 708:	06 c0       	rjmp	.+12     	; 0x716 <__stack+0x217>
 70a:	b3 94       	inc	r11
 70c:	b3 94       	inc	r11
 70e:	04 c0       	rjmp	.+8      	; 0x718 <__stack+0x219>
 710:	8a 2d       	mov	r24, r10
 712:	86 78       	andi	r24, 0x86	; 134
 714:	09 f0       	breq	.+2      	; 0x718 <__stack+0x219>
 716:	b3 94       	inc	r11
 718:	a3 fc       	sbrc	r10, 3
 71a:	11 c0       	rjmp	.+34     	; 0x73e <__stack+0x23f>
 71c:	a0 fe       	sbrs	r10, 0
 71e:	06 c0       	rjmp	.+12     	; 0x72c <__stack+0x22d>
 720:	b2 14       	cp	r11, r2
 722:	88 f4       	brcc	.+34     	; 0x746 <__stack+0x247>
 724:	28 0c       	add	r2, r8
 726:	92 2c       	mov	r9, r2
 728:	9b 18       	sub	r9, r11
 72a:	0e c0       	rjmp	.+28     	; 0x748 <__stack+0x249>
 72c:	b2 14       	cp	r11, r2
 72e:	60 f4       	brcc	.+24     	; 0x748 <__stack+0x249>
 730:	b6 01       	movw	r22, r12
 732:	80 e2       	ldi	r24, 0x20	; 32
 734:	90 e0       	ldi	r25, 0x00	; 0
 736:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 73a:	b3 94       	inc	r11
 73c:	f7 cf       	rjmp	.-18     	; 0x72c <__stack+0x22d>
 73e:	b2 14       	cp	r11, r2
 740:	18 f4       	brcc	.+6      	; 0x748 <__stack+0x249>
 742:	2b 18       	sub	r2, r11
 744:	02 c0       	rjmp	.+4      	; 0x74a <__stack+0x24b>
 746:	98 2c       	mov	r9, r8
 748:	21 2c       	mov	r2, r1
 74a:	a4 fe       	sbrs	r10, 4
 74c:	10 c0       	rjmp	.+32     	; 0x76e <__stack+0x26f>
 74e:	b6 01       	movw	r22, r12
 750:	80 e3       	ldi	r24, 0x30	; 48
 752:	90 e0       	ldi	r25, 0x00	; 0
 754:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 758:	a2 fe       	sbrs	r10, 2
 75a:	17 c0       	rjmp	.+46     	; 0x78a <__stack+0x28b>
 75c:	a1 fc       	sbrc	r10, 1
 75e:	03 c0       	rjmp	.+6      	; 0x766 <__stack+0x267>
 760:	88 e7       	ldi	r24, 0x78	; 120
 762:	90 e0       	ldi	r25, 0x00	; 0
 764:	02 c0       	rjmp	.+4      	; 0x76a <__stack+0x26b>
 766:	88 e5       	ldi	r24, 0x58	; 88
 768:	90 e0       	ldi	r25, 0x00	; 0
 76a:	b6 01       	movw	r22, r12
 76c:	0c c0       	rjmp	.+24     	; 0x786 <__stack+0x287>
 76e:	8a 2d       	mov	r24, r10
 770:	86 78       	andi	r24, 0x86	; 134
 772:	59 f0       	breq	.+22     	; 0x78a <__stack+0x28b>
 774:	a1 fe       	sbrs	r10, 1
 776:	02 c0       	rjmp	.+4      	; 0x77c <__stack+0x27d>
 778:	8b e2       	ldi	r24, 0x2B	; 43
 77a:	01 c0       	rjmp	.+2      	; 0x77e <__stack+0x27f>
 77c:	80 e2       	ldi	r24, 0x20	; 32
 77e:	a7 fc       	sbrc	r10, 7
 780:	8d e2       	ldi	r24, 0x2D	; 45
 782:	b6 01       	movw	r22, r12
 784:	90 e0       	ldi	r25, 0x00	; 0
 786:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 78a:	89 14       	cp	r8, r9
 78c:	38 f4       	brcc	.+14     	; 0x79c <__stack+0x29d>
 78e:	b6 01       	movw	r22, r12
 790:	80 e3       	ldi	r24, 0x30	; 48
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 798:	9a 94       	dec	r9
 79a:	f7 cf       	rjmp	.-18     	; 0x78a <__stack+0x28b>
 79c:	8a 94       	dec	r8
 79e:	f3 01       	movw	r30, r6
 7a0:	e8 0d       	add	r30, r8
 7a2:	f1 1d       	adc	r31, r1
 7a4:	80 81       	ld	r24, Z
 7a6:	b6 01       	movw	r22, r12
 7a8:	90 e0       	ldi	r25, 0x00	; 0
 7aa:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 7ae:	81 10       	cpse	r8, r1
 7b0:	f5 cf       	rjmp	.-22     	; 0x79c <__stack+0x29d>
 7b2:	22 20       	and	r2, r2
 7b4:	09 f4       	brne	.+2      	; 0x7b8 <__stack+0x2b9>
 7b6:	42 ce       	rjmp	.-892    	; 0x43c <vfprintf+0x24>
 7b8:	b6 01       	movw	r22, r12
 7ba:	80 e2       	ldi	r24, 0x20	; 32
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 03 04 	call	0x806	; 0x806 <fputc>
 7c2:	2a 94       	dec	r2
 7c4:	f6 cf       	rjmp	.-20     	; 0x7b2 <__stack+0x2b3>
 7c6:	f6 01       	movw	r30, r12
 7c8:	86 81       	ldd	r24, Z+6	; 0x06
 7ca:	97 81       	ldd	r25, Z+7	; 0x07
 7cc:	02 c0       	rjmp	.+4      	; 0x7d2 <__stack+0x2d3>
 7ce:	8f ef       	ldi	r24, 0xFF	; 255
 7d0:	9f ef       	ldi	r25, 0xFF	; 255
 7d2:	2b 96       	adiw	r28, 0x0b	; 11
 7d4:	e2 e1       	ldi	r30, 0x12	; 18
 7d6:	0c 94 eb 04 	jmp	0x9d6	; 0x9d6 <__epilogue_restores__>

000007da <strnlen_P>:
 7da:	fc 01       	movw	r30, r24
 7dc:	05 90       	lpm	r0, Z+
 7de:	61 50       	subi	r22, 0x01	; 1
 7e0:	70 40       	sbci	r23, 0x00	; 0
 7e2:	01 10       	cpse	r0, r1
 7e4:	d8 f7       	brcc	.-10     	; 0x7dc <strnlen_P+0x2>
 7e6:	80 95       	com	r24
 7e8:	90 95       	com	r25
 7ea:	8e 0f       	add	r24, r30
 7ec:	9f 1f       	adc	r25, r31
 7ee:	08 95       	ret

000007f0 <strnlen>:
 7f0:	fc 01       	movw	r30, r24
 7f2:	61 50       	subi	r22, 0x01	; 1
 7f4:	70 40       	sbci	r23, 0x00	; 0
 7f6:	01 90       	ld	r0, Z+
 7f8:	01 10       	cpse	r0, r1
 7fa:	d8 f7       	brcc	.-10     	; 0x7f2 <strnlen+0x2>
 7fc:	80 95       	com	r24
 7fe:	90 95       	com	r25
 800:	8e 0f       	add	r24, r30
 802:	9f 1f       	adc	r25, r31
 804:	08 95       	ret

00000806 <fputc>:
 806:	0f 93       	push	r16
 808:	1f 93       	push	r17
 80a:	cf 93       	push	r28
 80c:	df 93       	push	r29
 80e:	fb 01       	movw	r30, r22
 810:	23 81       	ldd	r18, Z+3	; 0x03
 812:	21 fd       	sbrc	r18, 1
 814:	03 c0       	rjmp	.+6      	; 0x81c <fputc+0x16>
 816:	8f ef       	ldi	r24, 0xFF	; 255
 818:	9f ef       	ldi	r25, 0xFF	; 255
 81a:	2c c0       	rjmp	.+88     	; 0x874 <fputc+0x6e>
 81c:	22 ff       	sbrs	r18, 2
 81e:	16 c0       	rjmp	.+44     	; 0x84c <fputc+0x46>
 820:	46 81       	ldd	r20, Z+6	; 0x06
 822:	57 81       	ldd	r21, Z+7	; 0x07
 824:	24 81       	ldd	r18, Z+4	; 0x04
 826:	35 81       	ldd	r19, Z+5	; 0x05
 828:	42 17       	cp	r20, r18
 82a:	53 07       	cpc	r21, r19
 82c:	44 f4       	brge	.+16     	; 0x83e <fputc+0x38>
 82e:	a0 81       	ld	r26, Z
 830:	b1 81       	ldd	r27, Z+1	; 0x01
 832:	9d 01       	movw	r18, r26
 834:	2f 5f       	subi	r18, 0xFF	; 255
 836:	3f 4f       	sbci	r19, 0xFF	; 255
 838:	31 83       	std	Z+1, r19	; 0x01
 83a:	20 83       	st	Z, r18
 83c:	8c 93       	st	X, r24
 83e:	26 81       	ldd	r18, Z+6	; 0x06
 840:	37 81       	ldd	r19, Z+7	; 0x07
 842:	2f 5f       	subi	r18, 0xFF	; 255
 844:	3f 4f       	sbci	r19, 0xFF	; 255
 846:	37 83       	std	Z+7, r19	; 0x07
 848:	26 83       	std	Z+6, r18	; 0x06
 84a:	14 c0       	rjmp	.+40     	; 0x874 <fputc+0x6e>
 84c:	8b 01       	movw	r16, r22
 84e:	ec 01       	movw	r28, r24
 850:	fb 01       	movw	r30, r22
 852:	00 84       	ldd	r0, Z+8	; 0x08
 854:	f1 85       	ldd	r31, Z+9	; 0x09
 856:	e0 2d       	mov	r30, r0
 858:	09 95       	icall
 85a:	89 2b       	or	r24, r25
 85c:	e1 f6       	brne	.-72     	; 0x816 <fputc+0x10>
 85e:	d8 01       	movw	r26, r16
 860:	16 96       	adiw	r26, 0x06	; 6
 862:	8d 91       	ld	r24, X+
 864:	9c 91       	ld	r25, X
 866:	17 97       	sbiw	r26, 0x07	; 7
 868:	01 96       	adiw	r24, 0x01	; 1
 86a:	17 96       	adiw	r26, 0x07	; 7
 86c:	9c 93       	st	X, r25
 86e:	8e 93       	st	-X, r24
 870:	16 97       	sbiw	r26, 0x06	; 6
 872:	ce 01       	movw	r24, r28
 874:	df 91       	pop	r29
 876:	cf 91       	pop	r28
 878:	1f 91       	pop	r17
 87a:	0f 91       	pop	r16
 87c:	08 95       	ret

0000087e <__ultoa_invert>:
 87e:	fa 01       	movw	r30, r20
 880:	aa 27       	eor	r26, r26
 882:	28 30       	cpi	r18, 0x08	; 8
 884:	51 f1       	breq	.+84     	; 0x8da <__ultoa_invert+0x5c>
 886:	20 31       	cpi	r18, 0x10	; 16
 888:	81 f1       	breq	.+96     	; 0x8ea <__ultoa_invert+0x6c>
 88a:	e8 94       	clt
 88c:	6f 93       	push	r22
 88e:	6e 7f       	andi	r22, 0xFE	; 254
 890:	6e 5f       	subi	r22, 0xFE	; 254
 892:	7f 4f       	sbci	r23, 0xFF	; 255
 894:	8f 4f       	sbci	r24, 0xFF	; 255
 896:	9f 4f       	sbci	r25, 0xFF	; 255
 898:	af 4f       	sbci	r26, 0xFF	; 255
 89a:	b1 e0       	ldi	r27, 0x01	; 1
 89c:	3e d0       	rcall	.+124    	; 0x91a <__ultoa_invert+0x9c>
 89e:	b4 e0       	ldi	r27, 0x04	; 4
 8a0:	3c d0       	rcall	.+120    	; 0x91a <__ultoa_invert+0x9c>
 8a2:	67 0f       	add	r22, r23
 8a4:	78 1f       	adc	r23, r24
 8a6:	89 1f       	adc	r24, r25
 8a8:	9a 1f       	adc	r25, r26
 8aa:	a1 1d       	adc	r26, r1
 8ac:	68 0f       	add	r22, r24
 8ae:	79 1f       	adc	r23, r25
 8b0:	8a 1f       	adc	r24, r26
 8b2:	91 1d       	adc	r25, r1
 8b4:	a1 1d       	adc	r26, r1
 8b6:	6a 0f       	add	r22, r26
 8b8:	71 1d       	adc	r23, r1
 8ba:	81 1d       	adc	r24, r1
 8bc:	91 1d       	adc	r25, r1
 8be:	a1 1d       	adc	r26, r1
 8c0:	20 d0       	rcall	.+64     	; 0x902 <__ultoa_invert+0x84>
 8c2:	09 f4       	brne	.+2      	; 0x8c6 <__ultoa_invert+0x48>
 8c4:	68 94       	set
 8c6:	3f 91       	pop	r19
 8c8:	2a e0       	ldi	r18, 0x0A	; 10
 8ca:	26 9f       	mul	r18, r22
 8cc:	11 24       	eor	r1, r1
 8ce:	30 19       	sub	r19, r0
 8d0:	30 5d       	subi	r19, 0xD0	; 208
 8d2:	31 93       	st	Z+, r19
 8d4:	de f6       	brtc	.-74     	; 0x88c <__ultoa_invert+0xe>
 8d6:	cf 01       	movw	r24, r30
 8d8:	08 95       	ret
 8da:	46 2f       	mov	r20, r22
 8dc:	47 70       	andi	r20, 0x07	; 7
 8de:	40 5d       	subi	r20, 0xD0	; 208
 8e0:	41 93       	st	Z+, r20
 8e2:	b3 e0       	ldi	r27, 0x03	; 3
 8e4:	0f d0       	rcall	.+30     	; 0x904 <__ultoa_invert+0x86>
 8e6:	c9 f7       	brne	.-14     	; 0x8da <__ultoa_invert+0x5c>
 8e8:	f6 cf       	rjmp	.-20     	; 0x8d6 <__ultoa_invert+0x58>
 8ea:	46 2f       	mov	r20, r22
 8ec:	4f 70       	andi	r20, 0x0F	; 15
 8ee:	40 5d       	subi	r20, 0xD0	; 208
 8f0:	4a 33       	cpi	r20, 0x3A	; 58
 8f2:	18 f0       	brcs	.+6      	; 0x8fa <__ultoa_invert+0x7c>
 8f4:	49 5d       	subi	r20, 0xD9	; 217
 8f6:	31 fd       	sbrc	r19, 1
 8f8:	40 52       	subi	r20, 0x20	; 32
 8fa:	41 93       	st	Z+, r20
 8fc:	02 d0       	rcall	.+4      	; 0x902 <__ultoa_invert+0x84>
 8fe:	a9 f7       	brne	.-22     	; 0x8ea <__ultoa_invert+0x6c>
 900:	ea cf       	rjmp	.-44     	; 0x8d6 <__ultoa_invert+0x58>
 902:	b4 e0       	ldi	r27, 0x04	; 4
 904:	a6 95       	lsr	r26
 906:	97 95       	ror	r25
 908:	87 95       	ror	r24
 90a:	77 95       	ror	r23
 90c:	67 95       	ror	r22
 90e:	ba 95       	dec	r27
 910:	c9 f7       	brne	.-14     	; 0x904 <__ultoa_invert+0x86>
 912:	00 97       	sbiw	r24, 0x00	; 0
 914:	61 05       	cpc	r22, r1
 916:	71 05       	cpc	r23, r1
 918:	08 95       	ret
 91a:	9b 01       	movw	r18, r22
 91c:	ac 01       	movw	r20, r24
 91e:	0a 2e       	mov	r0, r26
 920:	06 94       	lsr	r0
 922:	57 95       	ror	r21
 924:	47 95       	ror	r20
 926:	37 95       	ror	r19
 928:	27 95       	ror	r18
 92a:	ba 95       	dec	r27
 92c:	c9 f7       	brne	.-14     	; 0x920 <__ultoa_invert+0xa2>
 92e:	62 0f       	add	r22, r18
 930:	73 1f       	adc	r23, r19
 932:	84 1f       	adc	r24, r20
 934:	95 1f       	adc	r25, r21
 936:	a0 1d       	adc	r26, r0
 938:	08 95       	ret

0000093a <__divmodsi4>:
 93a:	05 2e       	mov	r0, r21
 93c:	97 fb       	bst	r25, 7
 93e:	1e f4       	brtc	.+6      	; 0x946 <__divmodsi4+0xc>
 940:	00 94       	com	r0
 942:	0e 94 b4 04 	call	0x968	; 0x968 <__negsi2>
 946:	57 fd       	sbrc	r21, 7
 948:	07 d0       	rcall	.+14     	; 0x958 <__divmodsi4_neg2>
 94a:	0e 94 06 05 	call	0xa0c	; 0xa0c <__udivmodsi4>
 94e:	07 fc       	sbrc	r0, 7
 950:	03 d0       	rcall	.+6      	; 0x958 <__divmodsi4_neg2>
 952:	4e f4       	brtc	.+18     	; 0x966 <__divmodsi4_exit>
 954:	0c 94 b4 04 	jmp	0x968	; 0x968 <__negsi2>

00000958 <__divmodsi4_neg2>:
 958:	50 95       	com	r21
 95a:	40 95       	com	r20
 95c:	30 95       	com	r19
 95e:	21 95       	neg	r18
 960:	3f 4f       	sbci	r19, 0xFF	; 255
 962:	4f 4f       	sbci	r20, 0xFF	; 255
 964:	5f 4f       	sbci	r21, 0xFF	; 255

00000966 <__divmodsi4_exit>:
 966:	08 95       	ret

00000968 <__negsi2>:
 968:	90 95       	com	r25
 96a:	80 95       	com	r24
 96c:	70 95       	com	r23
 96e:	61 95       	neg	r22
 970:	7f 4f       	sbci	r23, 0xFF	; 255
 972:	8f 4f       	sbci	r24, 0xFF	; 255
 974:	9f 4f       	sbci	r25, 0xFF	; 255
 976:	08 95       	ret

00000978 <__muluhisi3>:
 978:	0e 94 28 05 	call	0xa50	; 0xa50 <__umulhisi3>
 97c:	a5 9f       	mul	r26, r21
 97e:	90 0d       	add	r25, r0
 980:	b4 9f       	mul	r27, r20
 982:	90 0d       	add	r25, r0
 984:	a4 9f       	mul	r26, r20
 986:	80 0d       	add	r24, r0
 988:	91 1d       	adc	r25, r1
 98a:	11 24       	eor	r1, r1
 98c:	08 95       	ret

0000098e <__mulshisi3>:
 98e:	b7 ff       	sbrs	r27, 7
 990:	0c 94 bc 04 	jmp	0x978	; 0x978 <__muluhisi3>

00000994 <__mulohisi3>:
 994:	0e 94 bc 04 	call	0x978	; 0x978 <__muluhisi3>
 998:	82 1b       	sub	r24, r18
 99a:	93 0b       	sbc	r25, r19
 99c:	08 95       	ret

0000099e <__prologue_saves__>:
 99e:	2f 92       	push	r2
 9a0:	3f 92       	push	r3
 9a2:	4f 92       	push	r4
 9a4:	5f 92       	push	r5
 9a6:	6f 92       	push	r6
 9a8:	7f 92       	push	r7
 9aa:	8f 92       	push	r8
 9ac:	9f 92       	push	r9
 9ae:	af 92       	push	r10
 9b0:	bf 92       	push	r11
 9b2:	cf 92       	push	r12
 9b4:	df 92       	push	r13
 9b6:	ef 92       	push	r14
 9b8:	ff 92       	push	r15
 9ba:	0f 93       	push	r16
 9bc:	1f 93       	push	r17
 9be:	cf 93       	push	r28
 9c0:	df 93       	push	r29
 9c2:	cd b7       	in	r28, 0x3d	; 61
 9c4:	de b7       	in	r29, 0x3e	; 62
 9c6:	ca 1b       	sub	r28, r26
 9c8:	db 0b       	sbc	r29, r27
 9ca:	0f b6       	in	r0, 0x3f	; 63
 9cc:	f8 94       	cli
 9ce:	de bf       	out	0x3e, r29	; 62
 9d0:	0f be       	out	0x3f, r0	; 63
 9d2:	cd bf       	out	0x3d, r28	; 61
 9d4:	09 94       	ijmp

000009d6 <__epilogue_restores__>:
 9d6:	2a 88       	ldd	r2, Y+18	; 0x12
 9d8:	39 88       	ldd	r3, Y+17	; 0x11
 9da:	48 88       	ldd	r4, Y+16	; 0x10
 9dc:	5f 84       	ldd	r5, Y+15	; 0x0f
 9de:	6e 84       	ldd	r6, Y+14	; 0x0e
 9e0:	7d 84       	ldd	r7, Y+13	; 0x0d
 9e2:	8c 84       	ldd	r8, Y+12	; 0x0c
 9e4:	9b 84       	ldd	r9, Y+11	; 0x0b
 9e6:	aa 84       	ldd	r10, Y+10	; 0x0a
 9e8:	b9 84       	ldd	r11, Y+9	; 0x09
 9ea:	c8 84       	ldd	r12, Y+8	; 0x08
 9ec:	df 80       	ldd	r13, Y+7	; 0x07
 9ee:	ee 80       	ldd	r14, Y+6	; 0x06
 9f0:	fd 80       	ldd	r15, Y+5	; 0x05
 9f2:	0c 81       	ldd	r16, Y+4	; 0x04
 9f4:	1b 81       	ldd	r17, Y+3	; 0x03
 9f6:	aa 81       	ldd	r26, Y+2	; 0x02
 9f8:	b9 81       	ldd	r27, Y+1	; 0x01
 9fa:	ce 0f       	add	r28, r30
 9fc:	d1 1d       	adc	r29, r1
 9fe:	0f b6       	in	r0, 0x3f	; 63
 a00:	f8 94       	cli
 a02:	de bf       	out	0x3e, r29	; 62
 a04:	0f be       	out	0x3f, r0	; 63
 a06:	cd bf       	out	0x3d, r28	; 61
 a08:	ed 01       	movw	r28, r26
 a0a:	08 95       	ret

00000a0c <__udivmodsi4>:
 a0c:	a1 e2       	ldi	r26, 0x21	; 33
 a0e:	1a 2e       	mov	r1, r26
 a10:	aa 1b       	sub	r26, r26
 a12:	bb 1b       	sub	r27, r27
 a14:	fd 01       	movw	r30, r26
 a16:	0d c0       	rjmp	.+26     	; 0xa32 <__udivmodsi4_ep>

00000a18 <__udivmodsi4_loop>:
 a18:	aa 1f       	adc	r26, r26
 a1a:	bb 1f       	adc	r27, r27
 a1c:	ee 1f       	adc	r30, r30
 a1e:	ff 1f       	adc	r31, r31
 a20:	a2 17       	cp	r26, r18
 a22:	b3 07       	cpc	r27, r19
 a24:	e4 07       	cpc	r30, r20
 a26:	f5 07       	cpc	r31, r21
 a28:	20 f0       	brcs	.+8      	; 0xa32 <__udivmodsi4_ep>
 a2a:	a2 1b       	sub	r26, r18
 a2c:	b3 0b       	sbc	r27, r19
 a2e:	e4 0b       	sbc	r30, r20
 a30:	f5 0b       	sbc	r31, r21

00000a32 <__udivmodsi4_ep>:
 a32:	66 1f       	adc	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	99 1f       	adc	r25, r25
 a3a:	1a 94       	dec	r1
 a3c:	69 f7       	brne	.-38     	; 0xa18 <__udivmodsi4_loop>
 a3e:	60 95       	com	r22
 a40:	70 95       	com	r23
 a42:	80 95       	com	r24
 a44:	90 95       	com	r25
 a46:	9b 01       	movw	r18, r22
 a48:	ac 01       	movw	r20, r24
 a4a:	bd 01       	movw	r22, r26
 a4c:	cf 01       	movw	r24, r30
 a4e:	08 95       	ret

00000a50 <__umulhisi3>:
 a50:	a2 9f       	mul	r26, r18
 a52:	b0 01       	movw	r22, r0
 a54:	b3 9f       	mul	r27, r19
 a56:	c0 01       	movw	r24, r0
 a58:	a3 9f       	mul	r26, r19
 a5a:	70 0d       	add	r23, r0
 a5c:	81 1d       	adc	r24, r1
 a5e:	11 24       	eor	r1, r1
 a60:	91 1d       	adc	r25, r1
 a62:	b2 9f       	mul	r27, r18
 a64:	70 0d       	add	r23, r0
 a66:	81 1d       	adc	r24, r1
 a68:	11 24       	eor	r1, r1
 a6a:	91 1d       	adc	r25, r1
 a6c:	08 95       	ret

00000a6e <_exit>:
 a6e:	f8 94       	cli

00000a70 <__stop_program>:
 a70:	ff cf       	rjmp	.-2      	; 0xa70 <__stop_program>
