
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  000007e6  0000087a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080015a  0080015a  000008d4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000008d4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c8c  00000000  00000000  00000a24  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098f  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000500  00000000  00000000  0000203f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  00002540  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000052b  00000000  00000000  00002738  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000474  00000000  00000000  00002c63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  000030d7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	e6 ee       	ldi	r30, 0xE6	; 230
  84:	f7 e0       	ldi	r31, 0x07	; 7
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	aa 35       	cpi	r26, 0x5A	; 90
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	aa e5       	ldi	r26, 0x5A	; 90
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 36       	cpi	r26, 0x60	; 96
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  a6:	0c 94 f1 03 	jmp	0x7e2	; 0x7e2 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <UART_Init>:
	setBit(UCSR0B, RXCIE0);
}

// Deaktiver avbrot for når data blir mottatt
void UART_DisableReceiveInterrupt(void) {
	clearBit(UCSR0B, RXCIE0);
  ae:	90 bd       	out	0x20, r25	; 32
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	54 9a       	sbi	0x0a, 4	; 10
  b4:	53 9a       	sbi	0x0a, 3	; 10
  b6:	8e e8       	ldi	r24, 0x8E	; 142
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <UART_SendChar>:
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <UART_SendChar>
  c0:	8c b9       	out	0x0c, r24	; 12
  c2:	08 95       	ret

000000c4 <UART_putChar>:
  c4:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <UART_ReceiveChar>:
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_ReceiveChar>
  d2:	8c b1       	in	r24, 0x0c	; 12
  d4:	08 95       	ret

000000d6 <UART_getChar>:
  d6:	cf 93       	push	r28
  d8:	0e 94 67 00 	call	0xce	; 0xce <UART_ReceiveChar>
  dc:	c8 2f       	mov	r28, r24
  de:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <URAT_initStudio>:
  ea:	ea e5       	ldi	r30, 0x5A	; 90
  ec:	f1 e0       	ldi	r31, 0x01	; 1
  ee:	8e e0       	ldi	r24, 0x0E	; 14
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	93 83       	std	Z+3, r25	; 0x03
  f4:	82 83       	std	Z+2, r24	; 0x02
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <UART_EnableReceiveInterrupt>:
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	08 95       	ret

00000104 <__vector_19>:
}

// UART mottaksavbrotvektor USART0_RX_vect
ISR(USART0_RXC_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	// Handter mottatt data
	char received = UDR0;
 110:	8c b1       	in	r24, 0x0c	; 12
	
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:


int main(void) {
	
	// Initialiser UART med baudrate 9600
	UART_Init(MYUBBR);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 57 00 	call	0xae	; 0xae <UART_Init>
	
	// Initialiser stdio til å bruke UART
	URAT_initStudio();
 126:	0e 94 75 00 	call	0xea	; 0xea <URAT_initStudio>
	// Aktiver mottaksavbrot
	UART_EnableReceiveInterrupt();
 12a:	0e 94 80 00 	call	0x100	; 0x100 <UART_EnableReceiveInterrupt>
	
	// Aktiver globale avbrot
	sei();
 12e:	78 94       	sei
	
	
	//// Initialiser eksternt minne
	
	externalMemoryInit();
 130:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <externalMemoryInit>
		
	while (1) {
		SRAM_write(addr, data);
		
		uint8_t rdata = SRAM_read(addr);
		printf("%02X", rdata);
 134:	0f 2e       	mov	r0, r31
 136:	fc e1       	ldi	r31, 0x1C	; 28
 138:	cf 2e       	mov	r12, r31
 13a:	f1 e0       	ldi	r31, 0x01	; 1
 13c:	df 2e       	mov	r13, r31
 13e:	f0 2d       	mov	r31, r0
		printf("\n\r");
 140:	0f 2e       	mov	r0, r31
 142:	f6 e5       	ldi	r31, 0x56	; 86
 144:	ef 2e       	mov	r14, r31
 146:	f1 e0       	ldi	r31, 0x01	; 1
 148:	ff 2e       	mov	r15, r31
 14a:	f0 2d       	mov	r31, r0
		printf("Write phase error: ext_ram[%4d] = %2d (should be %2d)\n\r", addr, rdata, data);
 14c:	0f 2e       	mov	r0, r31
 14e:	f5 e4       	ldi	r31, 0x45	; 69
 150:	9f 2e       	mov	r9, r31
 152:	f0 2d       	mov	r31, r0
 154:	aa 24       	eor	r10, r10
 156:	a3 94       	inc	r10
 158:	0f 2e       	mov	r0, r31
 15a:	f4 ea       	ldi	r31, 0xA4	; 164
 15c:	bf 2e       	mov	r11, r31
 15e:	f0 2d       	mov	r31, r0
 160:	01 e2       	ldi	r16, 0x21	; 33
 162:	11 e0       	ldi	r17, 0x01	; 1
	//printf(rdata);
	//printf("\n\r");
	//printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", 0, rdata, data);
		
	while (1) {
		SRAM_write(addr, data);
 164:	65 e4       	ldi	r22, 0x45	; 69
 166:	70 e0       	ldi	r23, 0x00	; 0
 168:	84 ea       	ldi	r24, 0xA4	; 164
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <SRAM_write>
		
		uint8_t rdata = SRAM_read(addr);
 170:	84 ea       	ldi	r24, 0xA4	; 164
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 03 01 	call	0x206	; 0x206 <SRAM_read>
 178:	ec 01       	movw	r28, r24
 17a:	dd 27       	eor	r29, r29
		printf("%02X", rdata);
 17c:	df 93       	push	r29
 17e:	cf 93       	push	r28
 180:	df 92       	push	r13
 182:	cf 92       	push	r12
 184:	0e 94 13 01 	call	0x226	; 0x226 <printf>
		printf("\n\r");
 188:	ff 92       	push	r15
 18a:	ef 92       	push	r14
 18c:	0e 94 13 01 	call	0x226	; 0x226 <printf>
		printf("Write phase error: ext_ram[%4d] = %2d (should be %2d)\n\r", addr, rdata, data);
 190:	1f 92       	push	r1
 192:	9f 92       	push	r9
 194:	df 93       	push	r29
 196:	cf 93       	push	r28
 198:	af 92       	push	r10
 19a:	bf 92       	push	r11
 19c:	1f 93       	push	r17
 19e:	0f 93       	push	r16
 1a0:	0e 94 13 01 	call	0x226	; 0x226 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	8f ef       	ldi	r24, 0xFF	; 255
 1a6:	9f ef       	ldi	r25, 0xFF	; 255
 1a8:	2e e0       	ldi	r18, 0x0E	; 14
 1aa:	81 50       	subi	r24, 0x01	; 1
 1ac:	90 40       	sbci	r25, 0x00	; 0
 1ae:	20 40       	sbci	r18, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <main+0x8c>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <main+0x96>
 1b4:	00 00       	nop
 1b6:	8d b7       	in	r24, 0x3d	; 61
 1b8:	9e b7       	in	r25, 0x3e	; 62
 1ba:	0e 96       	adiw	r24, 0x0e	; 14
 1bc:	0f b6       	in	r0, 0x3f	; 63
 1be:	f8 94       	cli
 1c0:	9e bf       	out	0x3e, r25	; 62
 1c2:	0f be       	out	0x3f, r0	; 63
 1c4:	8d bf       	out	0x3d, r24	; 61
 1c6:	ce cf       	rjmp	.-100    	; 0x164 <main+0x46>

000001c8 <externalMemoryInit>:
#include "SRAM.h"

// Funksjon for å initialisere det eksterne minnet (SRAM + latch)
void externalMemoryInit(void) {
	// Set Port A (AD0-AD7) og Port C (A8-A15) som utgang for adresse- og databuss
	DDRA = 0xFF;  // PA0-PA7 som utgang
 1c8:	8f ef       	ldi	r24, 0xFF	; 255
 1ca:	8a bb       	out	0x1a, r24	; 26
	DDRC = 0x0F ;  // PC0-PC3 som utgang
 1cc:	8f e0       	ldi	r24, 0x0F	; 15
 1ce:	84 bb       	out	0x14, r24	; 20
 
	// Set Port D (PD6 og PD7) som utgang for WR og RD signal
	setBit(DDRD, PD6);  // WR
 1d0:	8e 9a       	sbi	0x11, 6	; 17
	setBit(DDRD, PD7);  // RD
 1d2:	8f 9a       	sbi	0x11, 7	; 17

	// Set Port E (PE1) som utgang for ALE
	setBit(DDRE, PE1);  // ALE
 1d4:	31 9a       	sbi	0x06, 1	; 6

	// Aktivere ekstern minnegrensesnitt
	setBit(MCUCR, SRE);   // Enable external SRAM interface
 1d6:	85 b7       	in	r24, 0x35	; 53
 1d8:	80 68       	ori	r24, 0x80	; 128
 1da:	85 bf       	out	0x35, r24	; 53
	SFIOR = 0x00;         // No wait state
 1dc:	10 be       	out	0x30, r1	; 48
	
	//Maskes pc4-pc7 (disables as output) (s32 ATmega datasheet)
	setBit(SFIOR, XMM2);
 1de:	80 b7       	in	r24, 0x30	; 48
 1e0:	80 62       	ori	r24, 0x20	; 32
 1e2:	80 bf       	out	0x30, r24	; 48
 1e4:	08 95       	ret

000001e6 <SRAM_write>:
}

// Funksjon for å skrive data til SRAM
void SRAM_write(volatile uint16_t addr, uint8_t data) {
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	00 d0       	rcall	.+0      	; 0x1ec <SRAM_write+0x6>
 1ec:	cd b7       	in	r28, 0x3d	; 61
 1ee:	de b7       	in	r29, 0x3e	; 62
 1f0:	9a 83       	std	Y+2, r25	; 0x02
 1f2:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) SRAM_START; // Startadresse for SRAM
	uint16_t ext_ram_size = SRAM_SIZE; // Størrelsen på SRAM (2 KB)	
	ext_ram[addr] = data;
 1f4:	e9 81       	ldd	r30, Y+1	; 0x01
 1f6:	fa 81       	ldd	r31, Y+2	; 0x02
 1f8:	f8 5e       	subi	r31, 0xE8	; 232
 1fa:	60 83       	st	Z, r22
	
	
}
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	df 91       	pop	r29
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <SRAM_read>:

// Funksjon for å lese data frå SRAM
uint8_t SRAM_read(volatile uint16_t addr) {
 206:	cf 93       	push	r28
 208:	df 93       	push	r29
 20a:	00 d0       	rcall	.+0      	; 0x20c <SRAM_read+0x6>
 20c:	cd b7       	in	r28, 0x3d	; 61
 20e:	de b7       	in	r29, 0x3e	; 62
 210:	9a 83       	std	Y+2, r25	; 0x02
 212:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) SRAM_START; // Startadresse for SRAM
	uint16_t ext_ram_size = SRAM_SIZE; // Størrelsen på SRAM (2 KB)
	uint8_t data = ext_ram[addr];
 214:	e9 81       	ldd	r30, Y+1	; 0x01
 216:	fa 81       	ldd	r31, Y+2	; 0x02
 218:	f8 5e       	subi	r31, 0xE8	; 232
 21a:	80 81       	ld	r24, Z
	
	return data;
}
 21c:	0f 90       	pop	r0
 21e:	0f 90       	pop	r0
 220:	df 91       	pop	r29
 222:	cf 91       	pop	r28
 224:	08 95       	ret

00000226 <printf>:
 226:	a0 e0       	ldi	r26, 0x00	; 0
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e9 e1       	ldi	r30, 0x19	; 25
 22c:	f1 e0       	ldi	r31, 0x01	; 1
 22e:	0c 94 ca 03 	jmp	0x794	; 0x794 <__prologue_saves__+0x20>
 232:	ae 01       	movw	r20, r28
 234:	4b 5f       	subi	r20, 0xFB	; 251
 236:	5f 4f       	sbci	r21, 0xFF	; 255
 238:	fa 01       	movw	r30, r20
 23a:	61 91       	ld	r22, Z+
 23c:	71 91       	ld	r23, Z+
 23e:	af 01       	movw	r20, r30
 240:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <__data_end+0x2>
 244:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <__data_end+0x3>
 248:	0e 94 29 01 	call	0x252	; 0x252 <vfprintf>
 24c:	e2 e0       	ldi	r30, 0x02	; 2
 24e:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__epilogue_restores__+0x20>

00000252 <vfprintf>:
 252:	ab e0       	ldi	r26, 0x0B	; 11
 254:	b0 e0       	ldi	r27, 0x00	; 0
 256:	ef e2       	ldi	r30, 0x2F	; 47
 258:	f1 e0       	ldi	r31, 0x01	; 1
 25a:	0c 94 ba 03 	jmp	0x774	; 0x774 <__prologue_saves__>
 25e:	6c 01       	movw	r12, r24
 260:	7b 01       	movw	r14, r22
 262:	8a 01       	movw	r16, r20
 264:	fc 01       	movw	r30, r24
 266:	17 82       	std	Z+7, r1	; 0x07
 268:	16 82       	std	Z+6, r1	; 0x06
 26a:	83 81       	ldd	r24, Z+3	; 0x03
 26c:	81 ff       	sbrs	r24, 1
 26e:	cc c1       	rjmp	.+920    	; 0x608 <__stack+0x109>
 270:	ce 01       	movw	r24, r28
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	3c 01       	movw	r6, r24
 276:	f6 01       	movw	r30, r12
 278:	93 81       	ldd	r25, Z+3	; 0x03
 27a:	f7 01       	movw	r30, r14
 27c:	93 fd       	sbrc	r25, 3
 27e:	85 91       	lpm	r24, Z+
 280:	93 ff       	sbrs	r25, 3
 282:	81 91       	ld	r24, Z+
 284:	7f 01       	movw	r14, r30
 286:	88 23       	and	r24, r24
 288:	09 f4       	brne	.+2      	; 0x28c <vfprintf+0x3a>
 28a:	ba c1       	rjmp	.+884    	; 0x600 <__stack+0x101>
 28c:	85 32       	cpi	r24, 0x25	; 37
 28e:	39 f4       	brne	.+14     	; 0x29e <vfprintf+0x4c>
 290:	93 fd       	sbrc	r25, 3
 292:	85 91       	lpm	r24, Z+
 294:	93 ff       	sbrs	r25, 3
 296:	81 91       	ld	r24, Z+
 298:	7f 01       	movw	r14, r30
 29a:	85 32       	cpi	r24, 0x25	; 37
 29c:	29 f4       	brne	.+10     	; 0x2a8 <vfprintf+0x56>
 29e:	b6 01       	movw	r22, r12
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 2a6:	e7 cf       	rjmp	.-50     	; 0x276 <vfprintf+0x24>
 2a8:	91 2c       	mov	r9, r1
 2aa:	21 2c       	mov	r2, r1
 2ac:	31 2c       	mov	r3, r1
 2ae:	ff e1       	ldi	r31, 0x1F	; 31
 2b0:	f3 15       	cp	r31, r3
 2b2:	d8 f0       	brcs	.+54     	; 0x2ea <vfprintf+0x98>
 2b4:	8b 32       	cpi	r24, 0x2B	; 43
 2b6:	79 f0       	breq	.+30     	; 0x2d6 <vfprintf+0x84>
 2b8:	38 f4       	brcc	.+14     	; 0x2c8 <vfprintf+0x76>
 2ba:	80 32       	cpi	r24, 0x20	; 32
 2bc:	79 f0       	breq	.+30     	; 0x2dc <vfprintf+0x8a>
 2be:	83 32       	cpi	r24, 0x23	; 35
 2c0:	a1 f4       	brne	.+40     	; 0x2ea <vfprintf+0x98>
 2c2:	23 2d       	mov	r18, r3
 2c4:	20 61       	ori	r18, 0x10	; 16
 2c6:	1d c0       	rjmp	.+58     	; 0x302 <vfprintf+0xb0>
 2c8:	8d 32       	cpi	r24, 0x2D	; 45
 2ca:	61 f0       	breq	.+24     	; 0x2e4 <vfprintf+0x92>
 2cc:	80 33       	cpi	r24, 0x30	; 48
 2ce:	69 f4       	brne	.+26     	; 0x2ea <vfprintf+0x98>
 2d0:	23 2d       	mov	r18, r3
 2d2:	21 60       	ori	r18, 0x01	; 1
 2d4:	16 c0       	rjmp	.+44     	; 0x302 <vfprintf+0xb0>
 2d6:	83 2d       	mov	r24, r3
 2d8:	82 60       	ori	r24, 0x02	; 2
 2da:	38 2e       	mov	r3, r24
 2dc:	e3 2d       	mov	r30, r3
 2de:	e4 60       	ori	r30, 0x04	; 4
 2e0:	3e 2e       	mov	r3, r30
 2e2:	2a c0       	rjmp	.+84     	; 0x338 <vfprintf+0xe6>
 2e4:	f3 2d       	mov	r31, r3
 2e6:	f8 60       	ori	r31, 0x08	; 8
 2e8:	1d c0       	rjmp	.+58     	; 0x324 <vfprintf+0xd2>
 2ea:	37 fc       	sbrc	r3, 7
 2ec:	2d c0       	rjmp	.+90     	; 0x348 <vfprintf+0xf6>
 2ee:	20 ed       	ldi	r18, 0xD0	; 208
 2f0:	28 0f       	add	r18, r24
 2f2:	2a 30       	cpi	r18, 0x0A	; 10
 2f4:	40 f0       	brcs	.+16     	; 0x306 <vfprintf+0xb4>
 2f6:	8e 32       	cpi	r24, 0x2E	; 46
 2f8:	b9 f4       	brne	.+46     	; 0x328 <vfprintf+0xd6>
 2fa:	36 fc       	sbrc	r3, 6
 2fc:	81 c1       	rjmp	.+770    	; 0x600 <__stack+0x101>
 2fe:	23 2d       	mov	r18, r3
 300:	20 64       	ori	r18, 0x40	; 64
 302:	32 2e       	mov	r3, r18
 304:	19 c0       	rjmp	.+50     	; 0x338 <vfprintf+0xe6>
 306:	36 fe       	sbrs	r3, 6
 308:	06 c0       	rjmp	.+12     	; 0x316 <vfprintf+0xc4>
 30a:	8a e0       	ldi	r24, 0x0A	; 10
 30c:	98 9e       	mul	r9, r24
 30e:	20 0d       	add	r18, r0
 310:	11 24       	eor	r1, r1
 312:	92 2e       	mov	r9, r18
 314:	11 c0       	rjmp	.+34     	; 0x338 <vfprintf+0xe6>
 316:	ea e0       	ldi	r30, 0x0A	; 10
 318:	2e 9e       	mul	r2, r30
 31a:	20 0d       	add	r18, r0
 31c:	11 24       	eor	r1, r1
 31e:	22 2e       	mov	r2, r18
 320:	f3 2d       	mov	r31, r3
 322:	f0 62       	ori	r31, 0x20	; 32
 324:	3f 2e       	mov	r3, r31
 326:	08 c0       	rjmp	.+16     	; 0x338 <vfprintf+0xe6>
 328:	8c 36       	cpi	r24, 0x6C	; 108
 32a:	21 f4       	brne	.+8      	; 0x334 <vfprintf+0xe2>
 32c:	83 2d       	mov	r24, r3
 32e:	80 68       	ori	r24, 0x80	; 128
 330:	38 2e       	mov	r3, r24
 332:	02 c0       	rjmp	.+4      	; 0x338 <vfprintf+0xe6>
 334:	88 36       	cpi	r24, 0x68	; 104
 336:	41 f4       	brne	.+16     	; 0x348 <vfprintf+0xf6>
 338:	f7 01       	movw	r30, r14
 33a:	93 fd       	sbrc	r25, 3
 33c:	85 91       	lpm	r24, Z+
 33e:	93 ff       	sbrs	r25, 3
 340:	81 91       	ld	r24, Z+
 342:	7f 01       	movw	r14, r30
 344:	81 11       	cpse	r24, r1
 346:	b3 cf       	rjmp	.-154    	; 0x2ae <vfprintf+0x5c>
 348:	98 2f       	mov	r25, r24
 34a:	9f 7d       	andi	r25, 0xDF	; 223
 34c:	95 54       	subi	r25, 0x45	; 69
 34e:	93 30       	cpi	r25, 0x03	; 3
 350:	28 f4       	brcc	.+10     	; 0x35c <vfprintf+0x10a>
 352:	0c 5f       	subi	r16, 0xFC	; 252
 354:	1f 4f       	sbci	r17, 0xFF	; 255
 356:	9f e3       	ldi	r25, 0x3F	; 63
 358:	99 83       	std	Y+1, r25	; 0x01
 35a:	0d c0       	rjmp	.+26     	; 0x376 <vfprintf+0x124>
 35c:	83 36       	cpi	r24, 0x63	; 99
 35e:	31 f0       	breq	.+12     	; 0x36c <vfprintf+0x11a>
 360:	83 37       	cpi	r24, 0x73	; 115
 362:	71 f0       	breq	.+28     	; 0x380 <vfprintf+0x12e>
 364:	83 35       	cpi	r24, 0x53	; 83
 366:	09 f0       	breq	.+2      	; 0x36a <vfprintf+0x118>
 368:	59 c0       	rjmp	.+178    	; 0x41c <__DATA_REGION_LENGTH__+0x1c>
 36a:	21 c0       	rjmp	.+66     	; 0x3ae <vfprintf+0x15c>
 36c:	f8 01       	movw	r30, r16
 36e:	80 81       	ld	r24, Z
 370:	89 83       	std	Y+1, r24	; 0x01
 372:	0e 5f       	subi	r16, 0xFE	; 254
 374:	1f 4f       	sbci	r17, 0xFF	; 255
 376:	88 24       	eor	r8, r8
 378:	83 94       	inc	r8
 37a:	91 2c       	mov	r9, r1
 37c:	53 01       	movw	r10, r6
 37e:	13 c0       	rjmp	.+38     	; 0x3a6 <vfprintf+0x154>
 380:	28 01       	movw	r4, r16
 382:	f2 e0       	ldi	r31, 0x02	; 2
 384:	4f 0e       	add	r4, r31
 386:	51 1c       	adc	r5, r1
 388:	f8 01       	movw	r30, r16
 38a:	a0 80       	ld	r10, Z
 38c:	b1 80       	ldd	r11, Z+1	; 0x01
 38e:	36 fe       	sbrs	r3, 6
 390:	03 c0       	rjmp	.+6      	; 0x398 <vfprintf+0x146>
 392:	69 2d       	mov	r22, r9
 394:	70 e0       	ldi	r23, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <vfprintf+0x14a>
 398:	6f ef       	ldi	r22, 0xFF	; 255
 39a:	7f ef       	ldi	r23, 0xFF	; 255
 39c:	c5 01       	movw	r24, r10
 39e:	0e 94 15 03 	call	0x62a	; 0x62a <strnlen>
 3a2:	4c 01       	movw	r8, r24
 3a4:	82 01       	movw	r16, r4
 3a6:	f3 2d       	mov	r31, r3
 3a8:	ff 77       	andi	r31, 0x7F	; 127
 3aa:	3f 2e       	mov	r3, r31
 3ac:	16 c0       	rjmp	.+44     	; 0x3da <vfprintf+0x188>
 3ae:	28 01       	movw	r4, r16
 3b0:	22 e0       	ldi	r18, 0x02	; 2
 3b2:	42 0e       	add	r4, r18
 3b4:	51 1c       	adc	r5, r1
 3b6:	f8 01       	movw	r30, r16
 3b8:	a0 80       	ld	r10, Z
 3ba:	b1 80       	ldd	r11, Z+1	; 0x01
 3bc:	36 fe       	sbrs	r3, 6
 3be:	03 c0       	rjmp	.+6      	; 0x3c6 <vfprintf+0x174>
 3c0:	69 2d       	mov	r22, r9
 3c2:	70 e0       	ldi	r23, 0x00	; 0
 3c4:	02 c0       	rjmp	.+4      	; 0x3ca <vfprintf+0x178>
 3c6:	6f ef       	ldi	r22, 0xFF	; 255
 3c8:	7f ef       	ldi	r23, 0xFF	; 255
 3ca:	c5 01       	movw	r24, r10
 3cc:	0e 94 0a 03 	call	0x614	; 0x614 <strnlen_P>
 3d0:	4c 01       	movw	r8, r24
 3d2:	f3 2d       	mov	r31, r3
 3d4:	f0 68       	ori	r31, 0x80	; 128
 3d6:	3f 2e       	mov	r3, r31
 3d8:	82 01       	movw	r16, r4
 3da:	33 fc       	sbrc	r3, 3
 3dc:	1b c0       	rjmp	.+54     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 3de:	82 2d       	mov	r24, r2
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	88 16       	cp	r8, r24
 3e4:	99 06       	cpc	r9, r25
 3e6:	b0 f4       	brcc	.+44     	; 0x414 <__DATA_REGION_LENGTH__+0x14>
 3e8:	b6 01       	movw	r22, r12
 3ea:	80 e2       	ldi	r24, 0x20	; 32
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 3f2:	2a 94       	dec	r2
 3f4:	f4 cf       	rjmp	.-24     	; 0x3de <vfprintf+0x18c>
 3f6:	f5 01       	movw	r30, r10
 3f8:	37 fc       	sbrc	r3, 7
 3fa:	85 91       	lpm	r24, Z+
 3fc:	37 fe       	sbrs	r3, 7
 3fe:	81 91       	ld	r24, Z+
 400:	5f 01       	movw	r10, r30
 402:	b6 01       	movw	r22, r12
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 40a:	21 10       	cpse	r2, r1
 40c:	2a 94       	dec	r2
 40e:	21 e0       	ldi	r18, 0x01	; 1
 410:	82 1a       	sub	r8, r18
 412:	91 08       	sbc	r9, r1
 414:	81 14       	cp	r8, r1
 416:	91 04       	cpc	r9, r1
 418:	71 f7       	brne	.-36     	; 0x3f6 <vfprintf+0x1a4>
 41a:	e8 c0       	rjmp	.+464    	; 0x5ec <__stack+0xed>
 41c:	84 36       	cpi	r24, 0x64	; 100
 41e:	11 f0       	breq	.+4      	; 0x424 <__DATA_REGION_LENGTH__+0x24>
 420:	89 36       	cpi	r24, 0x69	; 105
 422:	41 f5       	brne	.+80     	; 0x474 <__DATA_REGION_LENGTH__+0x74>
 424:	f8 01       	movw	r30, r16
 426:	37 fe       	sbrs	r3, 7
 428:	07 c0       	rjmp	.+14     	; 0x438 <__DATA_REGION_LENGTH__+0x38>
 42a:	60 81       	ld	r22, Z
 42c:	71 81       	ldd	r23, Z+1	; 0x01
 42e:	82 81       	ldd	r24, Z+2	; 0x02
 430:	93 81       	ldd	r25, Z+3	; 0x03
 432:	0c 5f       	subi	r16, 0xFC	; 252
 434:	1f 4f       	sbci	r17, 0xFF	; 255
 436:	08 c0       	rjmp	.+16     	; 0x448 <__DATA_REGION_LENGTH__+0x48>
 438:	60 81       	ld	r22, Z
 43a:	71 81       	ldd	r23, Z+1	; 0x01
 43c:	07 2e       	mov	r0, r23
 43e:	00 0c       	add	r0, r0
 440:	88 0b       	sbc	r24, r24
 442:	99 0b       	sbc	r25, r25
 444:	0e 5f       	subi	r16, 0xFE	; 254
 446:	1f 4f       	sbci	r17, 0xFF	; 255
 448:	f3 2d       	mov	r31, r3
 44a:	ff 76       	andi	r31, 0x6F	; 111
 44c:	3f 2e       	mov	r3, r31
 44e:	97 ff       	sbrs	r25, 7
 450:	09 c0       	rjmp	.+18     	; 0x464 <__DATA_REGION_LENGTH__+0x64>
 452:	90 95       	com	r25
 454:	80 95       	com	r24
 456:	70 95       	com	r23
 458:	61 95       	neg	r22
 45a:	7f 4f       	sbci	r23, 0xFF	; 255
 45c:	8f 4f       	sbci	r24, 0xFF	; 255
 45e:	9f 4f       	sbci	r25, 0xFF	; 255
 460:	f0 68       	ori	r31, 0x80	; 128
 462:	3f 2e       	mov	r3, r31
 464:	2a e0       	ldi	r18, 0x0A	; 10
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	a3 01       	movw	r20, r6
 46a:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__ultoa_invert>
 46e:	88 2e       	mov	r8, r24
 470:	86 18       	sub	r8, r6
 472:	45 c0       	rjmp	.+138    	; 0x4fe <__DATA_REGION_LENGTH__+0xfe>
 474:	85 37       	cpi	r24, 0x75	; 117
 476:	31 f4       	brne	.+12     	; 0x484 <__DATA_REGION_LENGTH__+0x84>
 478:	23 2d       	mov	r18, r3
 47a:	2f 7e       	andi	r18, 0xEF	; 239
 47c:	b2 2e       	mov	r11, r18
 47e:	2a e0       	ldi	r18, 0x0A	; 10
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	25 c0       	rjmp	.+74     	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
 484:	93 2d       	mov	r25, r3
 486:	99 7f       	andi	r25, 0xF9	; 249
 488:	b9 2e       	mov	r11, r25
 48a:	8f 36       	cpi	r24, 0x6F	; 111
 48c:	c1 f0       	breq	.+48     	; 0x4be <__DATA_REGION_LENGTH__+0xbe>
 48e:	18 f4       	brcc	.+6      	; 0x496 <__DATA_REGION_LENGTH__+0x96>
 490:	88 35       	cpi	r24, 0x58	; 88
 492:	79 f0       	breq	.+30     	; 0x4b2 <__DATA_REGION_LENGTH__+0xb2>
 494:	b5 c0       	rjmp	.+362    	; 0x600 <__stack+0x101>
 496:	80 37       	cpi	r24, 0x70	; 112
 498:	19 f0       	breq	.+6      	; 0x4a0 <__DATA_REGION_LENGTH__+0xa0>
 49a:	88 37       	cpi	r24, 0x78	; 120
 49c:	21 f0       	breq	.+8      	; 0x4a6 <__DATA_REGION_LENGTH__+0xa6>
 49e:	b0 c0       	rjmp	.+352    	; 0x600 <__stack+0x101>
 4a0:	e9 2f       	mov	r30, r25
 4a2:	e0 61       	ori	r30, 0x10	; 16
 4a4:	be 2e       	mov	r11, r30
 4a6:	b4 fe       	sbrs	r11, 4
 4a8:	0d c0       	rjmp	.+26     	; 0x4c4 <__DATA_REGION_LENGTH__+0xc4>
 4aa:	fb 2d       	mov	r31, r11
 4ac:	f4 60       	ori	r31, 0x04	; 4
 4ae:	bf 2e       	mov	r11, r31
 4b0:	09 c0       	rjmp	.+18     	; 0x4c4 <__DATA_REGION_LENGTH__+0xc4>
 4b2:	34 fe       	sbrs	r3, 4
 4b4:	0a c0       	rjmp	.+20     	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
 4b6:	29 2f       	mov	r18, r25
 4b8:	26 60       	ori	r18, 0x06	; 6
 4ba:	b2 2e       	mov	r11, r18
 4bc:	06 c0       	rjmp	.+12     	; 0x4ca <__DATA_REGION_LENGTH__+0xca>
 4be:	28 e0       	ldi	r18, 0x08	; 8
 4c0:	30 e0       	ldi	r19, 0x00	; 0
 4c2:	05 c0       	rjmp	.+10     	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
 4c4:	20 e1       	ldi	r18, 0x10	; 16
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	02 c0       	rjmp	.+4      	; 0x4ce <__DATA_REGION_LENGTH__+0xce>
 4ca:	20 e1       	ldi	r18, 0x10	; 16
 4cc:	32 e0       	ldi	r19, 0x02	; 2
 4ce:	f8 01       	movw	r30, r16
 4d0:	b7 fe       	sbrs	r11, 7
 4d2:	07 c0       	rjmp	.+14     	; 0x4e2 <__DATA_REGION_LENGTH__+0xe2>
 4d4:	60 81       	ld	r22, Z
 4d6:	71 81       	ldd	r23, Z+1	; 0x01
 4d8:	82 81       	ldd	r24, Z+2	; 0x02
 4da:	93 81       	ldd	r25, Z+3	; 0x03
 4dc:	0c 5f       	subi	r16, 0xFC	; 252
 4de:	1f 4f       	sbci	r17, 0xFF	; 255
 4e0:	06 c0       	rjmp	.+12     	; 0x4ee <__DATA_REGION_LENGTH__+0xee>
 4e2:	60 81       	ld	r22, Z
 4e4:	71 81       	ldd	r23, Z+1	; 0x01
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	0e 5f       	subi	r16, 0xFE	; 254
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
 4ee:	a3 01       	movw	r20, r6
 4f0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <__ultoa_invert>
 4f4:	88 2e       	mov	r8, r24
 4f6:	86 18       	sub	r8, r6
 4f8:	fb 2d       	mov	r31, r11
 4fa:	ff 77       	andi	r31, 0x7F	; 127
 4fc:	3f 2e       	mov	r3, r31
 4fe:	36 fe       	sbrs	r3, 6
 500:	0d c0       	rjmp	.+26     	; 0x51c <__stack+0x1d>
 502:	23 2d       	mov	r18, r3
 504:	2e 7f       	andi	r18, 0xFE	; 254
 506:	a2 2e       	mov	r10, r18
 508:	89 14       	cp	r8, r9
 50a:	58 f4       	brcc	.+22     	; 0x522 <__stack+0x23>
 50c:	34 fe       	sbrs	r3, 4
 50e:	0b c0       	rjmp	.+22     	; 0x526 <__stack+0x27>
 510:	32 fc       	sbrc	r3, 2
 512:	09 c0       	rjmp	.+18     	; 0x526 <__stack+0x27>
 514:	83 2d       	mov	r24, r3
 516:	8e 7e       	andi	r24, 0xEE	; 238
 518:	a8 2e       	mov	r10, r24
 51a:	05 c0       	rjmp	.+10     	; 0x526 <__stack+0x27>
 51c:	b8 2c       	mov	r11, r8
 51e:	a3 2c       	mov	r10, r3
 520:	03 c0       	rjmp	.+6      	; 0x528 <__stack+0x29>
 522:	b8 2c       	mov	r11, r8
 524:	01 c0       	rjmp	.+2      	; 0x528 <__stack+0x29>
 526:	b9 2c       	mov	r11, r9
 528:	a4 fe       	sbrs	r10, 4
 52a:	0f c0       	rjmp	.+30     	; 0x54a <__stack+0x4b>
 52c:	fe 01       	movw	r30, r28
 52e:	e8 0d       	add	r30, r8
 530:	f1 1d       	adc	r31, r1
 532:	80 81       	ld	r24, Z
 534:	80 33       	cpi	r24, 0x30	; 48
 536:	21 f4       	brne	.+8      	; 0x540 <__stack+0x41>
 538:	9a 2d       	mov	r25, r10
 53a:	99 7e       	andi	r25, 0xE9	; 233
 53c:	a9 2e       	mov	r10, r25
 53e:	09 c0       	rjmp	.+18     	; 0x552 <__stack+0x53>
 540:	a2 fe       	sbrs	r10, 2
 542:	06 c0       	rjmp	.+12     	; 0x550 <__stack+0x51>
 544:	b3 94       	inc	r11
 546:	b3 94       	inc	r11
 548:	04 c0       	rjmp	.+8      	; 0x552 <__stack+0x53>
 54a:	8a 2d       	mov	r24, r10
 54c:	86 78       	andi	r24, 0x86	; 134
 54e:	09 f0       	breq	.+2      	; 0x552 <__stack+0x53>
 550:	b3 94       	inc	r11
 552:	a3 fc       	sbrc	r10, 3
 554:	11 c0       	rjmp	.+34     	; 0x578 <__stack+0x79>
 556:	a0 fe       	sbrs	r10, 0
 558:	06 c0       	rjmp	.+12     	; 0x566 <__stack+0x67>
 55a:	b2 14       	cp	r11, r2
 55c:	88 f4       	brcc	.+34     	; 0x580 <__stack+0x81>
 55e:	28 0c       	add	r2, r8
 560:	92 2c       	mov	r9, r2
 562:	9b 18       	sub	r9, r11
 564:	0e c0       	rjmp	.+28     	; 0x582 <__stack+0x83>
 566:	b2 14       	cp	r11, r2
 568:	60 f4       	brcc	.+24     	; 0x582 <__stack+0x83>
 56a:	b6 01       	movw	r22, r12
 56c:	80 e2       	ldi	r24, 0x20	; 32
 56e:	90 e0       	ldi	r25, 0x00	; 0
 570:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 574:	b3 94       	inc	r11
 576:	f7 cf       	rjmp	.-18     	; 0x566 <__stack+0x67>
 578:	b2 14       	cp	r11, r2
 57a:	18 f4       	brcc	.+6      	; 0x582 <__stack+0x83>
 57c:	2b 18       	sub	r2, r11
 57e:	02 c0       	rjmp	.+4      	; 0x584 <__stack+0x85>
 580:	98 2c       	mov	r9, r8
 582:	21 2c       	mov	r2, r1
 584:	a4 fe       	sbrs	r10, 4
 586:	10 c0       	rjmp	.+32     	; 0x5a8 <__stack+0xa9>
 588:	b6 01       	movw	r22, r12
 58a:	80 e3       	ldi	r24, 0x30	; 48
 58c:	90 e0       	ldi	r25, 0x00	; 0
 58e:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 592:	a2 fe       	sbrs	r10, 2
 594:	17 c0       	rjmp	.+46     	; 0x5c4 <__stack+0xc5>
 596:	a1 fc       	sbrc	r10, 1
 598:	03 c0       	rjmp	.+6      	; 0x5a0 <__stack+0xa1>
 59a:	88 e7       	ldi	r24, 0x78	; 120
 59c:	90 e0       	ldi	r25, 0x00	; 0
 59e:	02 c0       	rjmp	.+4      	; 0x5a4 <__stack+0xa5>
 5a0:	88 e5       	ldi	r24, 0x58	; 88
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	b6 01       	movw	r22, r12
 5a6:	0c c0       	rjmp	.+24     	; 0x5c0 <__stack+0xc1>
 5a8:	8a 2d       	mov	r24, r10
 5aa:	86 78       	andi	r24, 0x86	; 134
 5ac:	59 f0       	breq	.+22     	; 0x5c4 <__stack+0xc5>
 5ae:	a1 fe       	sbrs	r10, 1
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <__stack+0xb7>
 5b2:	8b e2       	ldi	r24, 0x2B	; 43
 5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <__stack+0xb9>
 5b6:	80 e2       	ldi	r24, 0x20	; 32
 5b8:	a7 fc       	sbrc	r10, 7
 5ba:	8d e2       	ldi	r24, 0x2D	; 45
 5bc:	b6 01       	movw	r22, r12
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 5c4:	89 14       	cp	r8, r9
 5c6:	38 f4       	brcc	.+14     	; 0x5d6 <__stack+0xd7>
 5c8:	b6 01       	movw	r22, r12
 5ca:	80 e3       	ldi	r24, 0x30	; 48
 5cc:	90 e0       	ldi	r25, 0x00	; 0
 5ce:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 5d2:	9a 94       	dec	r9
 5d4:	f7 cf       	rjmp	.-18     	; 0x5c4 <__stack+0xc5>
 5d6:	8a 94       	dec	r8
 5d8:	f3 01       	movw	r30, r6
 5da:	e8 0d       	add	r30, r8
 5dc:	f1 1d       	adc	r31, r1
 5de:	80 81       	ld	r24, Z
 5e0:	b6 01       	movw	r22, r12
 5e2:	90 e0       	ldi	r25, 0x00	; 0
 5e4:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 5e8:	81 10       	cpse	r8, r1
 5ea:	f5 cf       	rjmp	.-22     	; 0x5d6 <__stack+0xd7>
 5ec:	22 20       	and	r2, r2
 5ee:	09 f4       	brne	.+2      	; 0x5f2 <__stack+0xf3>
 5f0:	42 ce       	rjmp	.-892    	; 0x276 <vfprintf+0x24>
 5f2:	b6 01       	movw	r22, r12
 5f4:	80 e2       	ldi	r24, 0x20	; 32
 5f6:	90 e0       	ldi	r25, 0x00	; 0
 5f8:	0e 94 20 03 	call	0x640	; 0x640 <fputc>
 5fc:	2a 94       	dec	r2
 5fe:	f6 cf       	rjmp	.-20     	; 0x5ec <__stack+0xed>
 600:	f6 01       	movw	r30, r12
 602:	86 81       	ldd	r24, Z+6	; 0x06
 604:	97 81       	ldd	r25, Z+7	; 0x07
 606:	02 c0       	rjmp	.+4      	; 0x60c <__stack+0x10d>
 608:	8f ef       	ldi	r24, 0xFF	; 255
 60a:	9f ef       	ldi	r25, 0xFF	; 255
 60c:	2b 96       	adiw	r28, 0x0b	; 11
 60e:	e2 e1       	ldi	r30, 0x12	; 18
 610:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__epilogue_restores__>

00000614 <strnlen_P>:
 614:	fc 01       	movw	r30, r24
 616:	05 90       	lpm	r0, Z+
 618:	61 50       	subi	r22, 0x01	; 1
 61a:	70 40       	sbci	r23, 0x00	; 0
 61c:	01 10       	cpse	r0, r1
 61e:	d8 f7       	brcc	.-10     	; 0x616 <strnlen_P+0x2>
 620:	80 95       	com	r24
 622:	90 95       	com	r25
 624:	8e 0f       	add	r24, r30
 626:	9f 1f       	adc	r25, r31
 628:	08 95       	ret

0000062a <strnlen>:
 62a:	fc 01       	movw	r30, r24
 62c:	61 50       	subi	r22, 0x01	; 1
 62e:	70 40       	sbci	r23, 0x00	; 0
 630:	01 90       	ld	r0, Z+
 632:	01 10       	cpse	r0, r1
 634:	d8 f7       	brcc	.-10     	; 0x62c <strnlen+0x2>
 636:	80 95       	com	r24
 638:	90 95       	com	r25
 63a:	8e 0f       	add	r24, r30
 63c:	9f 1f       	adc	r25, r31
 63e:	08 95       	ret

00000640 <fputc>:
 640:	0f 93       	push	r16
 642:	1f 93       	push	r17
 644:	cf 93       	push	r28
 646:	df 93       	push	r29
 648:	fb 01       	movw	r30, r22
 64a:	23 81       	ldd	r18, Z+3	; 0x03
 64c:	21 fd       	sbrc	r18, 1
 64e:	03 c0       	rjmp	.+6      	; 0x656 <fputc+0x16>
 650:	8f ef       	ldi	r24, 0xFF	; 255
 652:	9f ef       	ldi	r25, 0xFF	; 255
 654:	2c c0       	rjmp	.+88     	; 0x6ae <fputc+0x6e>
 656:	22 ff       	sbrs	r18, 2
 658:	16 c0       	rjmp	.+44     	; 0x686 <fputc+0x46>
 65a:	46 81       	ldd	r20, Z+6	; 0x06
 65c:	57 81       	ldd	r21, Z+7	; 0x07
 65e:	24 81       	ldd	r18, Z+4	; 0x04
 660:	35 81       	ldd	r19, Z+5	; 0x05
 662:	42 17       	cp	r20, r18
 664:	53 07       	cpc	r21, r19
 666:	44 f4       	brge	.+16     	; 0x678 <fputc+0x38>
 668:	a0 81       	ld	r26, Z
 66a:	b1 81       	ldd	r27, Z+1	; 0x01
 66c:	9d 01       	movw	r18, r26
 66e:	2f 5f       	subi	r18, 0xFF	; 255
 670:	3f 4f       	sbci	r19, 0xFF	; 255
 672:	31 83       	std	Z+1, r19	; 0x01
 674:	20 83       	st	Z, r18
 676:	8c 93       	st	X, r24
 678:	26 81       	ldd	r18, Z+6	; 0x06
 67a:	37 81       	ldd	r19, Z+7	; 0x07
 67c:	2f 5f       	subi	r18, 0xFF	; 255
 67e:	3f 4f       	sbci	r19, 0xFF	; 255
 680:	37 83       	std	Z+7, r19	; 0x07
 682:	26 83       	std	Z+6, r18	; 0x06
 684:	14 c0       	rjmp	.+40     	; 0x6ae <fputc+0x6e>
 686:	8b 01       	movw	r16, r22
 688:	ec 01       	movw	r28, r24
 68a:	fb 01       	movw	r30, r22
 68c:	00 84       	ldd	r0, Z+8	; 0x08
 68e:	f1 85       	ldd	r31, Z+9	; 0x09
 690:	e0 2d       	mov	r30, r0
 692:	09 95       	icall
 694:	89 2b       	or	r24, r25
 696:	e1 f6       	brne	.-72     	; 0x650 <fputc+0x10>
 698:	d8 01       	movw	r26, r16
 69a:	16 96       	adiw	r26, 0x06	; 6
 69c:	8d 91       	ld	r24, X+
 69e:	9c 91       	ld	r25, X
 6a0:	17 97       	sbiw	r26, 0x07	; 7
 6a2:	01 96       	adiw	r24, 0x01	; 1
 6a4:	17 96       	adiw	r26, 0x07	; 7
 6a6:	9c 93       	st	X, r25
 6a8:	8e 93       	st	-X, r24
 6aa:	16 97       	sbiw	r26, 0x06	; 6
 6ac:	ce 01       	movw	r24, r28
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	1f 91       	pop	r17
 6b4:	0f 91       	pop	r16
 6b6:	08 95       	ret

000006b8 <__ultoa_invert>:
 6b8:	fa 01       	movw	r30, r20
 6ba:	aa 27       	eor	r26, r26
 6bc:	28 30       	cpi	r18, 0x08	; 8
 6be:	51 f1       	breq	.+84     	; 0x714 <__ultoa_invert+0x5c>
 6c0:	20 31       	cpi	r18, 0x10	; 16
 6c2:	81 f1       	breq	.+96     	; 0x724 <__ultoa_invert+0x6c>
 6c4:	e8 94       	clt
 6c6:	6f 93       	push	r22
 6c8:	6e 7f       	andi	r22, 0xFE	; 254
 6ca:	6e 5f       	subi	r22, 0xFE	; 254
 6cc:	7f 4f       	sbci	r23, 0xFF	; 255
 6ce:	8f 4f       	sbci	r24, 0xFF	; 255
 6d0:	9f 4f       	sbci	r25, 0xFF	; 255
 6d2:	af 4f       	sbci	r26, 0xFF	; 255
 6d4:	b1 e0       	ldi	r27, 0x01	; 1
 6d6:	3e d0       	rcall	.+124    	; 0x754 <__ultoa_invert+0x9c>
 6d8:	b4 e0       	ldi	r27, 0x04	; 4
 6da:	3c d0       	rcall	.+120    	; 0x754 <__ultoa_invert+0x9c>
 6dc:	67 0f       	add	r22, r23
 6de:	78 1f       	adc	r23, r24
 6e0:	89 1f       	adc	r24, r25
 6e2:	9a 1f       	adc	r25, r26
 6e4:	a1 1d       	adc	r26, r1
 6e6:	68 0f       	add	r22, r24
 6e8:	79 1f       	adc	r23, r25
 6ea:	8a 1f       	adc	r24, r26
 6ec:	91 1d       	adc	r25, r1
 6ee:	a1 1d       	adc	r26, r1
 6f0:	6a 0f       	add	r22, r26
 6f2:	71 1d       	adc	r23, r1
 6f4:	81 1d       	adc	r24, r1
 6f6:	91 1d       	adc	r25, r1
 6f8:	a1 1d       	adc	r26, r1
 6fa:	20 d0       	rcall	.+64     	; 0x73c <__ultoa_invert+0x84>
 6fc:	09 f4       	brne	.+2      	; 0x700 <__ultoa_invert+0x48>
 6fe:	68 94       	set
 700:	3f 91       	pop	r19
 702:	2a e0       	ldi	r18, 0x0A	; 10
 704:	26 9f       	mul	r18, r22
 706:	11 24       	eor	r1, r1
 708:	30 19       	sub	r19, r0
 70a:	30 5d       	subi	r19, 0xD0	; 208
 70c:	31 93       	st	Z+, r19
 70e:	de f6       	brtc	.-74     	; 0x6c6 <__ultoa_invert+0xe>
 710:	cf 01       	movw	r24, r30
 712:	08 95       	ret
 714:	46 2f       	mov	r20, r22
 716:	47 70       	andi	r20, 0x07	; 7
 718:	40 5d       	subi	r20, 0xD0	; 208
 71a:	41 93       	st	Z+, r20
 71c:	b3 e0       	ldi	r27, 0x03	; 3
 71e:	0f d0       	rcall	.+30     	; 0x73e <__ultoa_invert+0x86>
 720:	c9 f7       	brne	.-14     	; 0x714 <__ultoa_invert+0x5c>
 722:	f6 cf       	rjmp	.-20     	; 0x710 <__ultoa_invert+0x58>
 724:	46 2f       	mov	r20, r22
 726:	4f 70       	andi	r20, 0x0F	; 15
 728:	40 5d       	subi	r20, 0xD0	; 208
 72a:	4a 33       	cpi	r20, 0x3A	; 58
 72c:	18 f0       	brcs	.+6      	; 0x734 <__ultoa_invert+0x7c>
 72e:	49 5d       	subi	r20, 0xD9	; 217
 730:	31 fd       	sbrc	r19, 1
 732:	40 52       	subi	r20, 0x20	; 32
 734:	41 93       	st	Z+, r20
 736:	02 d0       	rcall	.+4      	; 0x73c <__ultoa_invert+0x84>
 738:	a9 f7       	brne	.-22     	; 0x724 <__ultoa_invert+0x6c>
 73a:	ea cf       	rjmp	.-44     	; 0x710 <__ultoa_invert+0x58>
 73c:	b4 e0       	ldi	r27, 0x04	; 4
 73e:	a6 95       	lsr	r26
 740:	97 95       	ror	r25
 742:	87 95       	ror	r24
 744:	77 95       	ror	r23
 746:	67 95       	ror	r22
 748:	ba 95       	dec	r27
 74a:	c9 f7       	brne	.-14     	; 0x73e <__ultoa_invert+0x86>
 74c:	00 97       	sbiw	r24, 0x00	; 0
 74e:	61 05       	cpc	r22, r1
 750:	71 05       	cpc	r23, r1
 752:	08 95       	ret
 754:	9b 01       	movw	r18, r22
 756:	ac 01       	movw	r20, r24
 758:	0a 2e       	mov	r0, r26
 75a:	06 94       	lsr	r0
 75c:	57 95       	ror	r21
 75e:	47 95       	ror	r20
 760:	37 95       	ror	r19
 762:	27 95       	ror	r18
 764:	ba 95       	dec	r27
 766:	c9 f7       	brne	.-14     	; 0x75a <__ultoa_invert+0xa2>
 768:	62 0f       	add	r22, r18
 76a:	73 1f       	adc	r23, r19
 76c:	84 1f       	adc	r24, r20
 76e:	95 1f       	adc	r25, r21
 770:	a0 1d       	adc	r26, r0
 772:	08 95       	ret

00000774 <__prologue_saves__>:
 774:	2f 92       	push	r2
 776:	3f 92       	push	r3
 778:	4f 92       	push	r4
 77a:	5f 92       	push	r5
 77c:	6f 92       	push	r6
 77e:	7f 92       	push	r7
 780:	8f 92       	push	r8
 782:	9f 92       	push	r9
 784:	af 92       	push	r10
 786:	bf 92       	push	r11
 788:	cf 92       	push	r12
 78a:	df 92       	push	r13
 78c:	ef 92       	push	r14
 78e:	ff 92       	push	r15
 790:	0f 93       	push	r16
 792:	1f 93       	push	r17
 794:	cf 93       	push	r28
 796:	df 93       	push	r29
 798:	cd b7       	in	r28, 0x3d	; 61
 79a:	de b7       	in	r29, 0x3e	; 62
 79c:	ca 1b       	sub	r28, r26
 79e:	db 0b       	sbc	r29, r27
 7a0:	0f b6       	in	r0, 0x3f	; 63
 7a2:	f8 94       	cli
 7a4:	de bf       	out	0x3e, r29	; 62
 7a6:	0f be       	out	0x3f, r0	; 63
 7a8:	cd bf       	out	0x3d, r28	; 61
 7aa:	09 94       	ijmp

000007ac <__epilogue_restores__>:
 7ac:	2a 88       	ldd	r2, Y+18	; 0x12
 7ae:	39 88       	ldd	r3, Y+17	; 0x11
 7b0:	48 88       	ldd	r4, Y+16	; 0x10
 7b2:	5f 84       	ldd	r5, Y+15	; 0x0f
 7b4:	6e 84       	ldd	r6, Y+14	; 0x0e
 7b6:	7d 84       	ldd	r7, Y+13	; 0x0d
 7b8:	8c 84       	ldd	r8, Y+12	; 0x0c
 7ba:	9b 84       	ldd	r9, Y+11	; 0x0b
 7bc:	aa 84       	ldd	r10, Y+10	; 0x0a
 7be:	b9 84       	ldd	r11, Y+9	; 0x09
 7c0:	c8 84       	ldd	r12, Y+8	; 0x08
 7c2:	df 80       	ldd	r13, Y+7	; 0x07
 7c4:	ee 80       	ldd	r14, Y+6	; 0x06
 7c6:	fd 80       	ldd	r15, Y+5	; 0x05
 7c8:	0c 81       	ldd	r16, Y+4	; 0x04
 7ca:	1b 81       	ldd	r17, Y+3	; 0x03
 7cc:	aa 81       	ldd	r26, Y+2	; 0x02
 7ce:	b9 81       	ldd	r27, Y+1	; 0x01
 7d0:	ce 0f       	add	r28, r30
 7d2:	d1 1d       	adc	r29, r1
 7d4:	0f b6       	in	r0, 0x3f	; 63
 7d6:	f8 94       	cli
 7d8:	de bf       	out	0x3e, r29	; 62
 7da:	0f be       	out	0x3f, r0	; 63
 7dc:	cd bf       	out	0x3d, r28	; 61
 7de:	ed 01       	movw	r28, r26
 7e0:	08 95       	ret

000007e2 <_exit>:
 7e2:	f8 94       	cli

000007e4 <__stop_program>:
 7e4:	ff cf       	rjmp	.-2      	; 0x7e4 <__stop_program>
