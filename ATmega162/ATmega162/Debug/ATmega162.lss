
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000142  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000174  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000080  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009eb  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000840  00000000  00000000  00000c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000309  00000000  00000000  0000145b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001764  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000484  00000000  00000000  00001844  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000180  00000000  00000000  00001cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 57 00 	jmp	0xae	; 0xae <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee ee       	ldi	r30, 0xEE	; 238
  84:	f0 e0       	ldi	r31, 0x00	; 0
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  a6:	0c 94 75 00 	jmp	0xea	; 0xea <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <__vector_19>:
void UART_DisableReceiveInterrupt(void) {
	clearBit(UCSR0B, RXCIE0);
}

// UART mottaksavbrotvektor USART0_RX_vect
ISR(USART0_RXC_vect) {
  ae:	1f 92       	push	r1
  b0:	0f 92       	push	r0
  b2:	0f b6       	in	r0, 0x3f	; 63
  b4:	0f 92       	push	r0
  b6:	11 24       	eor	r1, r1
  b8:	8f 93       	push	r24
	// Handter mottatt data
	char received = UDR0;
  ba:	8c b1       	in	r24, 0x0c	; 12
	
}
  bc:	8f 91       	pop	r24
  be:	0f 90       	pop	r0
  c0:	0f be       	out	0x3f, r0	; 63
  c2:	0f 90       	pop	r0
  c4:	1f 90       	pop	r1
  c6:	18 95       	reti

000000c8 <main>:
	//SRAM_write(0x1801, 0xCD);  // Skriv 0xCD til adresse 0x1801
//
	////// Lese data frå SRAM
	////uint8_t data1 = SRAM_read(0x1800);
	////uint8_t data2 = SRAM_read(0x1801);
	DDRA = 0xFF; //Sett alle pins i port A til utgang
  c8:	8f ef       	ldi	r24, 0xFF	; 255
  ca:	8a bb       	out	0x1a, r24	; 26
	//PORTA = 0xFF; //Skru på pull-up resistor i alle pins
	
	uint8_t addr = 0x01;
	
	setBit(DDRE, PE1);
  cc:	31 9a       	sbi	0x06, 1	; 6
	setBit(PORTE, PE1);
  ce:	39 9a       	sbi	0x07, 1	; 7
	////uint8_t data1 = SRAM_read(0x1800);
	////uint8_t data2 = SRAM_read(0x1801);
	DDRA = 0xFF; //Sett alle pins i port A til utgang
	//PORTA = 0xFF; //Skru på pull-up resistor i alle pins
	
	uint8_t addr = 0x01;
  d0:	81 e0       	ldi	r24, 0x01	; 1
		
		//PORTA = addr;
		//_delay_ms(300);
		//addr++;
		
		PORTA = addr;
  d2:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	3f e7       	ldi	r19, 0x7F	; 127
  d8:	94 e0       	ldi	r25, 0x04	; 4
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	30 40       	sbci	r19, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x12>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x1c>
  e4:	00 00       	nop
		_delay_ms(300);
		addr++;		
  e6:	8f 5f       	subi	r24, 0xFF	; 255
  e8:	f4 cf       	rjmp	.-24     	; 0xd2 <main+0xa>

000000ea <_exit>:
  ea:	f8 94       	cli

000000ec <__stop_program>:
  ec:	ff cf       	rjmp	.-2      	; 0xec <__stop_program>
