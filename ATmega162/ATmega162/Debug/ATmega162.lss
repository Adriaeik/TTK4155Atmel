
ATmega162.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000012e  00800100  00000a7c  00000b10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000a7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  0080022e  0080022e  00000c3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000c3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000c9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00000cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e62  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a6f  00000000  00000000  00001c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000056f  00000000  00000000  00002588  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000234  00000000  00000000  00002af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000512  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004ec  00000000  00000000  0000323e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  0000372a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 82 00 	jmp	0x104	; 0x104 <__vector_19>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e7       	ldi	r30, 0x7C	; 124
  84:	fa e0       	ldi	r31, 0x0A	; 10
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 32       	cpi	r26, 0x2E	; 46
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e2       	ldi	r26, 0x2E	; 46
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 33       	cpi	r26, 0x34	; 52
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 8f 00 	call	0x11e	; 0x11e <main>
  a6:	0c 94 3c 05 	jmp	0xa78	; 0xa78 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <UART_Init>:
	setBit(UCSR0B, RXCIE0);
}

// Deaktiver avbrot for n�r data blir mottatt
void UART_DisableReceiveInterrupt(void) {
	clearBit(UCSR0B, RXCIE0);
  ae:	90 bd       	out	0x20, r25	; 32
  b0:	89 b9       	out	0x09, r24	; 9
  b2:	54 9a       	sbi	0x0a, 4	; 10
  b4:	53 9a       	sbi	0x0a, 3	; 10
  b6:	8e e8       	ldi	r24, 0x8E	; 142
  b8:	80 bd       	out	0x20, r24	; 32
  ba:	08 95       	ret

000000bc <UART_SendChar>:
  bc:	5d 9b       	sbis	0x0b, 5	; 11
  be:	fe cf       	rjmp	.-4      	; 0xbc <UART_SendChar>
  c0:	8c b9       	out	0x0c, r24	; 12
  c2:	08 95       	ret

000000c4 <UART_putChar>:
  c4:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  c8:	80 e0       	ldi	r24, 0x00	; 0
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	08 95       	ret

000000ce <UART_ReceiveChar>:
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <UART_ReceiveChar>
  d2:	8c b1       	in	r24, 0x0c	; 12
  d4:	08 95       	ret

000000d6 <UART_getChar>:
  d6:	cf 93       	push	r28
  d8:	0e 94 67 00 	call	0xce	; 0xce <UART_ReceiveChar>
  dc:	c8 2f       	mov	r28, r24
  de:	0e 94 5e 00 	call	0xbc	; 0xbc <UART_SendChar>
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <URAT_initStudio>:
  ea:	ee e2       	ldi	r30, 0x2E	; 46
  ec:	f2 e0       	ldi	r31, 0x02	; 2
  ee:	82 e1       	ldi	r24, 0x12	; 18
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	93 83       	std	Z+3, r25	; 0x03
  f4:	82 83       	std	Z+2, r24	; 0x02
  f6:	84 e0       	ldi	r24, 0x04	; 4
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	91 83       	std	Z+1, r25	; 0x01
  fc:	80 83       	st	Z, r24
  fe:	08 95       	ret

00000100 <UART_EnableReceiveInterrupt>:
 100:	57 9a       	sbi	0x0a, 7	; 10
 102:	08 95       	ret

00000104 <__vector_19>:
}

// UART mottaksavbrotvektor USART0_RX_vect
ISR(USART0_RXC_vect) {
 104:	1f 92       	push	r1
 106:	0f 92       	push	r0
 108:	0f b6       	in	r0, 0x3f	; 63
 10a:	0f 92       	push	r0
 10c:	11 24       	eor	r1, r1
 10e:	8f 93       	push	r24
	// Handter mottatt data
	char received = UDR0;
 110:	8c b1       	in	r24, 0x0c	; 12
	
}
 112:	8f 91       	pop	r24
 114:	0f 90       	pop	r0
 116:	0f be       	out	0x3f, r0	; 63
 118:	0f 90       	pop	r0
 11a:	1f 90       	pop	r1
 11c:	18 95       	reti

0000011e <main>:


int main(void) {
	
	// Initialiser UART med baudrate 9600
	UART_Init(MYUBBR);
 11e:	8f e1       	ldi	r24, 0x1F	; 31
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	0e 94 57 00 	call	0xae	; 0xae <UART_Init>
	
	// Initialiser stdio til � bruke UART
	URAT_initStudio();
 126:	0e 94 75 00 	call	0xea	; 0xea <URAT_initStudio>
	// Aktiver mottaksavbrot
	UART_EnableReceiveInterrupt();
 12a:	0e 94 80 00 	call	0x100	; 0x100 <UART_EnableReceiveInterrupt>
	
	// Aktiver globale avbrot
	sei();
 12e:	78 94       	sei
	
	
	//// Initialiser eksternt minne
	
	externalMemoryInit();
 130:	0e 94 40 01 	call	0x280	; 0x280 <externalMemoryInit>
	
	
	SRAM_test();
 134:	0e 94 b8 00 	call	0x170	; 0x170 <SRAM_test>
	while (1) {
		
		//Universal_write(addr, data);
		Universal_write(addr, data);
		rdata = Universal_read(addr);
		printf("Reading from: ext_ram[%4d] = %2d \n\r", addr, rdata);
 13a:	15 e1       	ldi	r17, 0x15	; 21
 13c:	c0 e2       	ldi	r28, 0x20	; 32
 13e:	d1 e0       	ldi	r29, 0x01	; 1
	

	while (1) {
		
		//Universal_write(addr, data);
		Universal_write(addr, data);
 140:	6a e0       	ldi	r22, 0x0A	; 10
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	95 e1       	ldi	r25, 0x15	; 21
 146:	0e 94 4f 01 	call	0x29e	; 0x29e <Universal_write>
		rdata = Universal_read(addr);
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	95 e1       	ldi	r25, 0x15	; 21
 14e:	0e 94 5f 01 	call	0x2be	; 0x2be <Universal_read>
		printf("Reading from: ext_ram[%4d] = %2d \n\r", addr, rdata);
 152:	1f 92       	push	r1
 154:	8f 93       	push	r24
 156:	1f 93       	push	r17
 158:	1f 92       	push	r1
 15a:	df 93       	push	r29
 15c:	cf 93       	push	r28
 15e:	0e 94 cb 01 	call	0x396	; 0x396 <printf>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 162:	89 e9       	ldi	r24, 0x99	; 153
 164:	99 e9       	ldi	r25, 0x99	; 153
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x48>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <main+0x4e>
 16c:	0f 90       	pop	r0
 16e:	0f 90       	pop	r0
 170:	0f 90       	pop	r0
 172:	0f 90       	pop	r0
 174:	0f 90       	pop	r0
 176:	0f 90       	pop	r0
 178:	e3 cf       	rjmp	.-58     	; 0x140 <main+0x22>

0000017a <SRAM_test>:
 * Created: 04.09.2024 18:23:23
 *  Author: adriaeik
 */ 
#include "SRAM.h"

void SRAM_test(void) {
 17a:	cf 92       	push	r12
 17c:	df 92       	push	r13
 17e:	ef 92       	push	r14
 180:	ff 92       	push	r15
 182:	0f 93       	push	r16
 184:	1f 93       	push	r17
 186:	cf 93       	push	r28
 188:	df 93       	push	r29
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // St�rrelsen p� SRAM (2 KB)
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
	
	printf("Starting SRAM test...\n");
 18a:	84 e4       	ldi	r24, 0x44	; 68
 18c:	91 e0       	ldi	r25, 0x01	; 1
 18e:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <puts>
	
	uint16_t seed = rand(); // Genererer eit fr� for random-tall
 192:	0e 94 bb 01 	call	0x376	; 0x376 <rand>
 196:	7c 01       	movw	r14, r24
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
 198:	0e 94 c0 01 	call	0x380	; 0x380 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 19c:	c1 2c       	mov	r12, r1
 19e:	d1 2c       	mov	r13, r1
#include "SRAM.h"

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // St�rrelsen p� SRAM (2 KB)
	uint16_t write_errors = 0;
 1a0:	00 e0       	ldi	r16, 0x00	; 0
 1a2:	10 e0       	ldi	r17, 0x00	; 0
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand(); // Genererer eit tilfeldig verdi
		ext_ram[i] = some_value;
		uint8_t retrieved_value = ext_ram[i];
		if (retrieved_value != some_value) {
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 1a4:	ca e5       	ldi	r28, 0x5A	; 90
 1a6:	d1 e0       	ldi	r29, 0x01	; 1
	uint16_t seed = rand(); // Genererer eit fr� for random-tall
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand(); // Genererer eit tilfeldig verdi
 1a8:	0e 94 bb 01 	call	0x376	; 0x376 <rand>
 1ac:	f6 01       	movw	r30, r12
 1ae:	f8 5e       	subi	r31, 0xE8	; 232
		ext_ram[i] = some_value;
 1b0:	80 83       	st	Z, r24
		uint8_t retrieved_value = ext_ram[i];
 1b2:	20 81       	ld	r18, Z
		if (retrieved_value != some_value) {
 1b4:	28 17       	cp	r18, r24
 1b6:	a9 f0       	breq	.+42     	; 0x1e2 <SRAM_test+0x68>
			printf("Write phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 1b8:	99 27       	eor	r25, r25
 1ba:	9f 93       	push	r25
 1bc:	8f 93       	push	r24
 1be:	1f 92       	push	r1
 1c0:	2f 93       	push	r18
 1c2:	df 92       	push	r13
 1c4:	cf 92       	push	r12
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	0e 94 cb 01 	call	0x396	; 0x396 <printf>
			write_errors++;
 1ce:	0f 5f       	subi	r16, 0xFF	; 255
 1d0:	1f 4f       	sbci	r17, 0xFF	; 255
 1d2:	8d b7       	in	r24, 0x3d	; 61
 1d4:	9e b7       	in	r25, 0x3e	; 62
 1d6:	08 96       	adiw	r24, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	9e bf       	out	0x3e, r25	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	8d bf       	out	0x3d, r24	; 61
	
	uint16_t seed = rand(); // Genererer eit fr� for random-tall
	
	// Skrivefasen: Skriv og sjekk verdien umiddelbart
	srand(seed);
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1e2:	9f ef       	ldi	r25, 0xFF	; 255
 1e4:	c9 1a       	sub	r12, r25
 1e6:	d9 0a       	sbc	r13, r25
 1e8:	c1 14       	cp	r12, r1
 1ea:	88 e0       	ldi	r24, 0x08	; 8
 1ec:	d8 06       	cpc	r13, r24
 1ee:	e1 f6       	brne	.-72     	; 0x1a8 <SRAM_test+0x2e>
			write_errors++;
		}
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for � f� same sekvens av random tall
 1f0:	c7 01       	movw	r24, r14
 1f2:	0e 94 c0 01 	call	0x380	; 0x380 <srand>
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 1f6:	c0 e0       	ldi	r28, 0x00	; 0
 1f8:	d0 e0       	ldi	r29, 0x00	; 0

void SRAM_test(void) {
	volatile char *ext_ram = (char *) 0x1800; // Startadresse for SRAM
	uint16_t ext_ram_size = 0x0800; // St�rrelsen p� SRAM (2 KB)
	uint16_t write_errors = 0;
	uint16_t retrieval_errors = 0;
 1fa:	e1 2c       	mov	r14, r1
 1fc:	f1 2c       	mov	r15, r1
	srand(seed); // Resetter PRNG for � f� same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
		uint8_t retrieved_value = ext_ram[i];
		if (retrieved_value != some_value) {
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 1fe:	0f 2e       	mov	r0, r31
 200:	f4 e9       	ldi	r31, 0x94	; 148
 202:	cf 2e       	mov	r12, r31
 204:	f1 e0       	ldi	r31, 0x01	; 1
 206:	df 2e       	mov	r13, r31
 208:	f0 2d       	mov	r31, r0
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for � f� same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
		uint8_t some_value = rand();
 20a:	0e 94 bb 01 	call	0x376	; 0x376 <rand>
 20e:	fe 01       	movw	r30, r28
 210:	f8 5e       	subi	r31, 0xE8	; 232
		uint8_t retrieved_value = ext_ram[i];
 212:	20 81       	ld	r18, Z
		if (retrieved_value != some_value) {
 20a:	28 17       	cp	r18, r24
 20c:	b1 f0       	breq	.+44     	; 0x23a <__EEPROM_REGION_LENGTH__+0x3a>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
 218:	99 27       	eor	r25, r25
 21a:	9f 93       	push	r25
 21c:	8f 93       	push	r24
 21e:	1f 92       	push	r1
 220:	2f 93       	push	r18
 222:	df 93       	push	r29
 224:	cf 93       	push	r28
 226:	df 92       	push	r13
 228:	cf 92       	push	r12
 22a:	0e 94 cb 01 	call	0x396	; 0x396 <printf>
			retrieval_errors++;
 22e:	9f ef       	ldi	r25, 0xFF	; 255
 230:	e9 1a       	sub	r14, r25
 232:	f9 0a       	sbc	r15, r25
 234:	8d b7       	in	r24, 0x3d	; 61
 236:	9e b7       	in	r25, 0x3e	; 62
 238:	08 96       	adiw	r24, 0x08	; 8
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	9e bf       	out	0x3e, r25	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	8d bf       	out	0x3d, r24	; 61
		}
	}
	
	// Hente-fasen: Sjekk at ingen verdier har blitt endra etter skrivefasen
	srand(seed); // Resetter PRNG for � f� same sekvens av random tall
	for (uint16_t i = 0; i < ext_ram_size; i++) {
 23a:	21 96       	adiw	r28, 0x01	; 1
 23c:	c1 15       	cp	r28, r1
 23e:	98 e0       	ldi	r25, 0x08	; 8
 240:	d9 07       	cpc	r29, r25
 242:	f1 f6       	brne	.-68     	; 0x200 <__EEPROM_REGION_LENGTH__>
			printf("Retrieval phase error: ext_ram[%4d] = %02X (should be %02X)\n\r", i, retrieved_value, some_value);
			retrieval_errors++;
		}
	}
	
	printf("SRAM test completed with \n\r%4d errors in write phase and \n\r%4d errors in retrieval phase\n\r", write_errors, retrieval_errors);
 24e:	ff 92       	push	r15
 250:	ef 92       	push	r14
 252:	1f 93       	push	r17
 254:	0f 93       	push	r16
 256:	82 ed       	ldi	r24, 0xD2	; 210
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	9f 93       	push	r25
 25c:	8f 93       	push	r24
 25e:	0e 94 cb 01 	call	0x396	; 0x396 <printf>
}
 262:	0f 90       	pop	r0
 264:	0f 90       	pop	r0
 266:	0f 90       	pop	r0
 268:	0f 90       	pop	r0
 26a:	0f 90       	pop	r0
 26c:	0f 90       	pop	r0
 26e:	df 91       	pop	r29
 270:	cf 91       	pop	r28
 272:	1f 91       	pop	r17
 274:	0f 91       	pop	r16
 276:	ff 90       	pop	r15
 278:	ef 90       	pop	r14
 27a:	df 90       	pop	r13
 27c:	cf 90       	pop	r12
 27e:	08 95       	ret

00000280 <externalMemoryInit>:
	volatile char *ext_ram = (char *) SRAM_START; // Startadresse for SRAM
	uint16_t ext_ram_size = SRAM_SIZE; // St�rrelsen p� SRAM (2 KB)
	uint8_t data = ext_ram[addr];
	
	return data;
}
 280:	8f ef       	ldi	r24, 0xFF	; 255
 282:	8a bb       	out	0x1a, r24	; 26
 284:	8f e0       	ldi	r24, 0x0F	; 15
 286:	84 bb       	out	0x14, r24	; 20
 288:	8e 9a       	sbi	0x11, 6	; 17
 28a:	8f 9a       	sbi	0x11, 7	; 17
 28c:	31 9a       	sbi	0x06, 1	; 6
 28e:	85 b7       	in	r24, 0x35	; 53
 290:	80 68       	ori	r24, 0x80	; 128
 292:	85 bf       	out	0x35, r24	; 53
 294:	10 be       	out	0x30, r1	; 48
 296:	80 b7       	in	r24, 0x30	; 48
 298:	80 62       	ori	r24, 0x20	; 32
 29a:	80 bf       	out	0x30, r24	; 48
 29c:	08 95       	ret

0000029e <Universal_write>:

// Funksjon for � skrive data til SRAM
void Universal_write(volatile uint16_t addr, uint8_t data) {
 29e:	cf 93       	push	r28
 2a0:	df 93       	push	r29
 2a2:	00 d0       	rcall	.+0      	; 0x2a4 <Universal_write+0x6>
 2a4:	cd b7       	in	r28, 0x3d	; 61
 2a6:	de b7       	in	r29, 0x3e	; 62
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) OLED_START; // Startadresse for SRAM
	ext_ram[addr] = data;
 2ac:	e9 81       	ldd	r30, Y+1	; 0x01
 2ae:	fa 81       	ldd	r31, Y+2	; 0x02
 2b0:	f0 5f       	subi	r31, 0xF0	; 240
 2b2:	60 83       	st	Z, r22
		
}
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <Universal_read>:

// Funksjon for � lese data fr� SRAM
uint8_t Universal_read(volatile uint16_t addr) {
 2be:	cf 93       	push	r28
 2c0:	df 93       	push	r29
 2c2:	00 d0       	rcall	.+0      	; 0x2c4 <Universal_read+0x6>
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
 2c8:	9a 83       	std	Y+2, r25	; 0x02
 2ca:	89 83       	std	Y+1, r24	; 0x01
	volatile char *ext_ram = (char *) OLED_START; // Startadresse for SRAM
	uint8_t data = ext_ram[addr];
 2cc:	e9 81       	ldd	r30, Y+1	; 0x01
 2ce:	fa 81       	ldd	r31, Y+2	; 0x02
 2d0:	f0 5f       	subi	r31, 0xF0	; 240
 2d2:	80 81       	ld	r24, Z
	
	return data;
 2d4:	0f 90       	pop	r0
 2d6:	0f 90       	pop	r0
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <do_rand>:
 2de:	8f 92       	push	r8
 2e0:	9f 92       	push	r9
 2e2:	af 92       	push	r10
 2e4:	bf 92       	push	r11
 2e6:	cf 92       	push	r12
 2e8:	df 92       	push	r13
 2ea:	ef 92       	push	r14
 2ec:	ff 92       	push	r15
 2ee:	cf 93       	push	r28
 2f0:	df 93       	push	r29
 2f2:	ec 01       	movw	r28, r24
 2f4:	68 81       	ld	r22, Y
 2f6:	79 81       	ldd	r23, Y+1	; 0x01
 2f8:	8a 81       	ldd	r24, Y+2	; 0x02
 2fa:	9b 81       	ldd	r25, Y+3	; 0x03
 2fc:	61 15       	cp	r22, r1
 2fe:	71 05       	cpc	r23, r1
 300:	81 05       	cpc	r24, r1
 302:	91 05       	cpc	r25, r1
 304:	21 f4       	brne	.+8      	; 0x30e <do_rand+0x30>
 306:	64 e2       	ldi	r22, 0x24	; 36
 308:	79 ed       	ldi	r23, 0xD9	; 217
 30a:	8b e5       	ldi	r24, 0x5B	; 91
 30c:	97 e0       	ldi	r25, 0x07	; 7
 30e:	2d e1       	ldi	r18, 0x1D	; 29
 310:	33 ef       	ldi	r19, 0xF3	; 243
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	50 e0       	ldi	r21, 0x00	; 0
 316:	0e 94 a2 04 	call	0x944	; 0x944 <__divmodsi4>
 31a:	49 01       	movw	r8, r18
 31c:	5a 01       	movw	r10, r20
 31e:	9b 01       	movw	r18, r22
 320:	ac 01       	movw	r20, r24
 322:	a7 ea       	ldi	r26, 0xA7	; 167
 324:	b1 e4       	ldi	r27, 0x41	; 65
 326:	0e 94 c1 04 	call	0x982	; 0x982 <__muluhisi3>
 32a:	6b 01       	movw	r12, r22
 32c:	7c 01       	movw	r14, r24
 32e:	ac ee       	ldi	r26, 0xEC	; 236
 330:	b4 ef       	ldi	r27, 0xF4	; 244
 332:	a5 01       	movw	r20, r10
 334:	94 01       	movw	r18, r8
 336:	0e 94 cf 04 	call	0x99e	; 0x99e <__mulohisi3>
 33a:	dc 01       	movw	r26, r24
 33c:	cb 01       	movw	r24, r22
 33e:	8c 0d       	add	r24, r12
 340:	9d 1d       	adc	r25, r13
 342:	ae 1d       	adc	r26, r14
 344:	bf 1d       	adc	r27, r15
 346:	b7 ff       	sbrs	r27, 7
 348:	03 c0       	rjmp	.+6      	; 0x350 <do_rand+0x72>
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	a1 09       	sbc	r26, r1
 34e:	b0 48       	sbci	r27, 0x80	; 128
 350:	88 83       	st	Y, r24
 352:	99 83       	std	Y+1, r25	; 0x01
 354:	aa 83       	std	Y+2, r26	; 0x02
 356:	bb 83       	std	Y+3, r27	; 0x03
 358:	9f 77       	andi	r25, 0x7F	; 127
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	ff 90       	pop	r15
 360:	ef 90       	pop	r14
 362:	df 90       	pop	r13
 364:	cf 90       	pop	r12
 366:	bf 90       	pop	r11
 368:	af 90       	pop	r10
 36a:	9f 90       	pop	r9
 36c:	8f 90       	pop	r8
 36e:	08 95       	ret

00000370 <rand_r>:
 370:	0e 94 6f 01 	call	0x2de	; 0x2de <do_rand>
 374:	08 95       	ret

00000376 <srand>:
 376:	a0 e0       	ldi	r26, 0x00	; 0
 378:	b0 e0       	ldi	r27, 0x00	; 0
 37a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 37e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 382:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 386:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 38a:	08 95       	ret

00000396 <printf>:
 396:	a0 e0       	ldi	r26, 0x00	; 0
 398:	b0 e0       	ldi	r27, 0x00	; 0
 39a:	e1 ed       	ldi	r30, 0xD1	; 209
 39c:	f1 e0       	ldi	r31, 0x01	; 1
 39e:	0c 94 e4 04 	jmp	0x9c8	; 0x9c8 <__prologue_saves__+0x20>
 3a2:	ae 01       	movw	r20, r28
 3a4:	4b 5f       	subi	r20, 0xFB	; 251
 3a6:	5f 4f       	sbci	r21, 0xFF	; 255
 3a8:	fa 01       	movw	r30, r20
 3aa:	61 91       	ld	r22, Z+
 3ac:	71 91       	ld	r23, Z+
 3ae:	af 01       	movw	r20, r30
 3b0:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <__data_end+0x2>
 3b4:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <__data_end+0x3>
 3b8:	0e 94 11 02 	call	0x422	; 0x422 <vfprintf>
 3bc:	e2 e0       	ldi	r30, 0x02	; 2
 3be:	0c 94 00 05 	jmp	0xa00	; 0xa00 <__epilogue_restores__+0x20>

000003b8 <puts>:
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	e0 91 30 02 	lds	r30, 0x0230	; 0x800230 <__data_end+0x2>
 3c4:	f0 91 31 02 	lds	r31, 0x0231	; 0x800231 <__data_end+0x3>
 3c8:	23 81       	ldd	r18, Z+3	; 0x03
 3ca:	21 ff       	sbrs	r18, 1
 3cc:	1b c0       	rjmp	.+54     	; 0x404 <__DATA_REGION_LENGTH__+0x4>
 3ce:	8c 01       	movw	r16, r24
 3d0:	d0 e0       	ldi	r29, 0x00	; 0
 3d2:	c0 e0       	ldi	r28, 0x00	; 0
 3d4:	f8 01       	movw	r30, r16
 3d6:	81 91       	ld	r24, Z+
 3d8:	8f 01       	movw	r16, r30
 3da:	60 91 30 02 	lds	r22, 0x0230	; 0x800230 <__data_end+0x2>
 3de:	70 91 31 02 	lds	r23, 0x0231	; 0x800231 <__data_end+0x3>
 3e2:	db 01       	movw	r26, r22
 3e4:	18 96       	adiw	r26, 0x08	; 8
 3e6:	ed 91       	ld	r30, X+
 3e8:	fc 91       	ld	r31, X
 3ea:	19 97       	sbiw	r26, 0x09	; 9
 3ec:	88 23       	and	r24, r24
 3ee:	31 f0       	breq	.+12     	; 0x3fc <puts+0x44>
 3f0:	09 95       	icall
 3f2:	89 2b       	or	r24, r25
 3f4:	79 f3       	breq	.-34     	; 0x3d4 <puts+0x1c>
 3f6:	df ef       	ldi	r29, 0xFF	; 255
 3f8:	cf ef       	ldi	r28, 0xFF	; 255
 3fa:	ec cf       	rjmp	.-40     	; 0x3d4 <puts+0x1c>
 3fc:	8a e0       	ldi	r24, 0x0A	; 10
 3fe:	09 95       	icall
 400:	89 2b       	or	r24, r25
 402:	19 f0       	breq	.+6      	; 0x40a <__DATA_REGION_LENGTH__+0xa>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	02 c0       	rjmp	.+4      	; 0x40e <__DATA_REGION_LENGTH__+0xe>
 40a:	8d 2f       	mov	r24, r29
 40c:	9c 2f       	mov	r25, r28
 40e:	df 91       	pop	r29
 410:	cf 91       	pop	r28
 412:	1f 91       	pop	r17
 414:	0f 91       	pop	r16
 416:	08 95       	ret

00000422 <vfprintf>:
 422:	ab e0       	ldi	r26, 0x0B	; 11
 424:	b0 e0       	ldi	r27, 0x00	; 0
 426:	e7 e1       	ldi	r30, 0x17	; 23
 428:	f2 e0       	ldi	r31, 0x02	; 2
 42a:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__prologue_saves__>
 42e:	6c 01       	movw	r12, r24
 430:	7b 01       	movw	r14, r22
 432:	8a 01       	movw	r16, r20
 434:	fc 01       	movw	r30, r24
 436:	17 82       	std	Z+7, r1	; 0x07
 438:	16 82       	std	Z+6, r1	; 0x06
 43a:	83 81       	ldd	r24, Z+3	; 0x03
 43c:	81 ff       	sbrs	r24, 1
 43e:	cc c1       	rjmp	.+920    	; 0x7d8 <__stack+0x2d9>
 440:	ce 01       	movw	r24, r28
 442:	01 96       	adiw	r24, 0x01	; 1
 444:	3c 01       	movw	r6, r24
 446:	f6 01       	movw	r30, r12
 448:	93 81       	ldd	r25, Z+3	; 0x03
 44a:	f7 01       	movw	r30, r14
 44c:	93 fd       	sbrc	r25, 3
 44e:	85 91       	lpm	r24, Z+
 450:	93 ff       	sbrs	r25, 3
 452:	81 91       	ld	r24, Z+
 454:	7f 01       	movw	r14, r30
 456:	88 23       	and	r24, r24
 458:	09 f4       	brne	.+2      	; 0x45c <vfprintf+0x3a>
 45a:	ba c1       	rjmp	.+884    	; 0x7d0 <__stack+0x2d1>
 45c:	85 32       	cpi	r24, 0x25	; 37
 45e:	39 f4       	brne	.+14     	; 0x46e <vfprintf+0x4c>
 460:	93 fd       	sbrc	r25, 3
 462:	85 91       	lpm	r24, Z+
 464:	93 ff       	sbrs	r25, 3
 466:	81 91       	ld	r24, Z+
 468:	7f 01       	movw	r14, r30
 46a:	85 32       	cpi	r24, 0x25	; 37
 46c:	29 f4       	brne	.+10     	; 0x478 <vfprintf+0x56>
 46e:	b6 01       	movw	r22, r12
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 476:	e7 cf       	rjmp	.-50     	; 0x446 <vfprintf+0x24>
 478:	91 2c       	mov	r9, r1
 47a:	21 2c       	mov	r2, r1
 47c:	31 2c       	mov	r3, r1
 47e:	ff e1       	ldi	r31, 0x1F	; 31
 480:	f3 15       	cp	r31, r3
 482:	d8 f0       	brcs	.+54     	; 0x4ba <vfprintf+0x98>
 484:	8b 32       	cpi	r24, 0x2B	; 43
 486:	79 f0       	breq	.+30     	; 0x4a6 <vfprintf+0x84>
 488:	38 f4       	brcc	.+14     	; 0x498 <vfprintf+0x76>
 48a:	80 32       	cpi	r24, 0x20	; 32
 48c:	79 f0       	breq	.+30     	; 0x4ac <vfprintf+0x8a>
 48e:	83 32       	cpi	r24, 0x23	; 35
 490:	a1 f4       	brne	.+40     	; 0x4ba <vfprintf+0x98>
 492:	23 2d       	mov	r18, r3
 494:	20 61       	ori	r18, 0x10	; 16
 496:	1d c0       	rjmp	.+58     	; 0x4d2 <vfprintf+0xb0>
 498:	8d 32       	cpi	r24, 0x2D	; 45
 49a:	61 f0       	breq	.+24     	; 0x4b4 <vfprintf+0x92>
 49c:	80 33       	cpi	r24, 0x30	; 48
 49e:	69 f4       	brne	.+26     	; 0x4ba <vfprintf+0x98>
 4a0:	23 2d       	mov	r18, r3
 4a2:	21 60       	ori	r18, 0x01	; 1
 4a4:	16 c0       	rjmp	.+44     	; 0x4d2 <vfprintf+0xb0>
 4a6:	83 2d       	mov	r24, r3
 4a8:	82 60       	ori	r24, 0x02	; 2
 4aa:	38 2e       	mov	r3, r24
 4ac:	e3 2d       	mov	r30, r3
 4ae:	e4 60       	ori	r30, 0x04	; 4
 4b0:	3e 2e       	mov	r3, r30
 4b2:	2a c0       	rjmp	.+84     	; 0x508 <__stack+0x9>
 4b4:	f3 2d       	mov	r31, r3
 4b6:	f8 60       	ori	r31, 0x08	; 8
 4b8:	1d c0       	rjmp	.+58     	; 0x4f4 <vfprintf+0xd2>
 4ba:	37 fc       	sbrc	r3, 7
 4bc:	2d c0       	rjmp	.+90     	; 0x518 <__stack+0x19>
 4be:	20 ed       	ldi	r18, 0xD0	; 208
 4c0:	28 0f       	add	r18, r24
 4c2:	2a 30       	cpi	r18, 0x0A	; 10
 4c4:	40 f0       	brcs	.+16     	; 0x4d6 <vfprintf+0xb4>
 4c6:	8e 32       	cpi	r24, 0x2E	; 46
 4c8:	b9 f4       	brne	.+46     	; 0x4f8 <vfprintf+0xd6>
 4ca:	36 fc       	sbrc	r3, 6
 4cc:	81 c1       	rjmp	.+770    	; 0x7d0 <__stack+0x2d1>
 4ce:	23 2d       	mov	r18, r3
 4d0:	20 64       	ori	r18, 0x40	; 64
 4d2:	32 2e       	mov	r3, r18
 4d4:	19 c0       	rjmp	.+50     	; 0x508 <__stack+0x9>
 4d6:	36 fe       	sbrs	r3, 6
 4d8:	06 c0       	rjmp	.+12     	; 0x4e6 <vfprintf+0xc4>
 4da:	8a e0       	ldi	r24, 0x0A	; 10
 4dc:	98 9e       	mul	r9, r24
 4de:	20 0d       	add	r18, r0
 4e0:	11 24       	eor	r1, r1
 4e2:	92 2e       	mov	r9, r18
 4e4:	11 c0       	rjmp	.+34     	; 0x508 <__stack+0x9>
 4e6:	ea e0       	ldi	r30, 0x0A	; 10
 4e8:	2e 9e       	mul	r2, r30
 4ea:	20 0d       	add	r18, r0
 4ec:	11 24       	eor	r1, r1
 4ee:	22 2e       	mov	r2, r18
 4f0:	f3 2d       	mov	r31, r3
 4f2:	f0 62       	ori	r31, 0x20	; 32
 4f4:	3f 2e       	mov	r3, r31
 4f6:	08 c0       	rjmp	.+16     	; 0x508 <__stack+0x9>
 4f8:	8c 36       	cpi	r24, 0x6C	; 108
 4fa:	21 f4       	brne	.+8      	; 0x504 <__stack+0x5>
 4fc:	83 2d       	mov	r24, r3
 4fe:	80 68       	ori	r24, 0x80	; 128
 500:	38 2e       	mov	r3, r24
 502:	02 c0       	rjmp	.+4      	; 0x508 <__stack+0x9>
 504:	88 36       	cpi	r24, 0x68	; 104
 506:	41 f4       	brne	.+16     	; 0x518 <__stack+0x19>
 508:	f7 01       	movw	r30, r14
 50a:	93 fd       	sbrc	r25, 3
 50c:	85 91       	lpm	r24, Z+
 50e:	93 ff       	sbrs	r25, 3
 510:	81 91       	ld	r24, Z+
 512:	7f 01       	movw	r14, r30
 514:	81 11       	cpse	r24, r1
 516:	b3 cf       	rjmp	.-154    	; 0x47e <vfprintf+0x5c>
 518:	98 2f       	mov	r25, r24
 51a:	9f 7d       	andi	r25, 0xDF	; 223
 51c:	95 54       	subi	r25, 0x45	; 69
 51e:	93 30       	cpi	r25, 0x03	; 3
 520:	28 f4       	brcc	.+10     	; 0x52c <__stack+0x2d>
 522:	0c 5f       	subi	r16, 0xFC	; 252
 524:	1f 4f       	sbci	r17, 0xFF	; 255
 526:	9f e3       	ldi	r25, 0x3F	; 63
 528:	99 83       	std	Y+1, r25	; 0x01
 52a:	0d c0       	rjmp	.+26     	; 0x546 <__stack+0x47>
 52c:	83 36       	cpi	r24, 0x63	; 99
 52e:	31 f0       	breq	.+12     	; 0x53c <__stack+0x3d>
 530:	83 37       	cpi	r24, 0x73	; 115
 532:	71 f0       	breq	.+28     	; 0x550 <__stack+0x51>
 534:	83 35       	cpi	r24, 0x53	; 83
 536:	09 f0       	breq	.+2      	; 0x53a <__stack+0x3b>
 538:	59 c0       	rjmp	.+178    	; 0x5ec <__stack+0xed>
 53a:	21 c0       	rjmp	.+66     	; 0x57e <__stack+0x7f>
 53c:	f8 01       	movw	r30, r16
 53e:	80 81       	ld	r24, Z
 540:	89 83       	std	Y+1, r24	; 0x01
 542:	0e 5f       	subi	r16, 0xFE	; 254
 544:	1f 4f       	sbci	r17, 0xFF	; 255
 546:	88 24       	eor	r8, r8
 548:	83 94       	inc	r8
 54a:	91 2c       	mov	r9, r1
 54c:	53 01       	movw	r10, r6
 54e:	13 c0       	rjmp	.+38     	; 0x576 <__stack+0x77>
 550:	28 01       	movw	r4, r16
 552:	f2 e0       	ldi	r31, 0x02	; 2
 554:	4f 0e       	add	r4, r31
 556:	51 1c       	adc	r5, r1
 558:	f8 01       	movw	r30, r16
 55a:	a0 80       	ld	r10, Z
 55c:	b1 80       	ldd	r11, Z+1	; 0x01
 55e:	36 fe       	sbrs	r3, 6
 560:	03 c0       	rjmp	.+6      	; 0x568 <__stack+0x69>
 562:	69 2d       	mov	r22, r9
 564:	70 e0       	ldi	r23, 0x00	; 0
 566:	02 c0       	rjmp	.+4      	; 0x56c <__stack+0x6d>
 568:	6f ef       	ldi	r22, 0xFF	; 255
 56a:	7f ef       	ldi	r23, 0xFF	; 255
 56c:	c5 01       	movw	r24, r10
 56e:	0e 94 fd 03 	call	0x7fa	; 0x7fa <strnlen>
 572:	4c 01       	movw	r8, r24
 574:	82 01       	movw	r16, r4
 576:	f3 2d       	mov	r31, r3
 578:	ff 77       	andi	r31, 0x7F	; 127
 57a:	3f 2e       	mov	r3, r31
 57c:	16 c0       	rjmp	.+44     	; 0x5aa <__stack+0xab>
 57e:	28 01       	movw	r4, r16
 580:	22 e0       	ldi	r18, 0x02	; 2
 582:	42 0e       	add	r4, r18
 584:	51 1c       	adc	r5, r1
 586:	f8 01       	movw	r30, r16
 588:	a0 80       	ld	r10, Z
 58a:	b1 80       	ldd	r11, Z+1	; 0x01
 58c:	36 fe       	sbrs	r3, 6
 58e:	03 c0       	rjmp	.+6      	; 0x596 <__stack+0x97>
 590:	69 2d       	mov	r22, r9
 592:	70 e0       	ldi	r23, 0x00	; 0
 594:	02 c0       	rjmp	.+4      	; 0x59a <__stack+0x9b>
 596:	6f ef       	ldi	r22, 0xFF	; 255
 598:	7f ef       	ldi	r23, 0xFF	; 255
 59a:	c5 01       	movw	r24, r10
 59c:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <strnlen_P>
 5a0:	4c 01       	movw	r8, r24
 5a2:	f3 2d       	mov	r31, r3
 5a4:	f0 68       	ori	r31, 0x80	; 128
 5a6:	3f 2e       	mov	r3, r31
 5a8:	82 01       	movw	r16, r4
 5aa:	33 fc       	sbrc	r3, 3
 5ac:	1b c0       	rjmp	.+54     	; 0x5e4 <__stack+0xe5>
 5ae:	82 2d       	mov	r24, r2
 5b0:	90 e0       	ldi	r25, 0x00	; 0
 5b2:	88 16       	cp	r8, r24
 5b4:	99 06       	cpc	r9, r25
 5b6:	b0 f4       	brcc	.+44     	; 0x5e4 <__stack+0xe5>
 5b8:	b6 01       	movw	r22, r12
 5ba:	80 e2       	ldi	r24, 0x20	; 32
 5bc:	90 e0       	ldi	r25, 0x00	; 0
 5be:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 5c2:	2a 94       	dec	r2
 5c4:	f4 cf       	rjmp	.-24     	; 0x5ae <__stack+0xaf>
 5c6:	f5 01       	movw	r30, r10
 5c8:	37 fc       	sbrc	r3, 7
 5ca:	85 91       	lpm	r24, Z+
 5cc:	37 fe       	sbrs	r3, 7
 5ce:	81 91       	ld	r24, Z+
 5d0:	5f 01       	movw	r10, r30
 5d2:	b6 01       	movw	r22, r12
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 5da:	21 10       	cpse	r2, r1
 5dc:	2a 94       	dec	r2
 5de:	21 e0       	ldi	r18, 0x01	; 1
 5e0:	82 1a       	sub	r8, r18
 5e2:	91 08       	sbc	r9, r1
 5e4:	81 14       	cp	r8, r1
 5e6:	91 04       	cpc	r9, r1
 5e8:	71 f7       	brne	.-36     	; 0x5c6 <__stack+0xc7>
 5ea:	e8 c0       	rjmp	.+464    	; 0x7bc <__stack+0x2bd>
 5ec:	84 36       	cpi	r24, 0x64	; 100
 5ee:	11 f0       	breq	.+4      	; 0x5f4 <__stack+0xf5>
 5f0:	89 36       	cpi	r24, 0x69	; 105
 5f2:	41 f5       	brne	.+80     	; 0x644 <__stack+0x145>
 5f4:	f8 01       	movw	r30, r16
 5f6:	37 fe       	sbrs	r3, 7
 5f8:	07 c0       	rjmp	.+14     	; 0x608 <__stack+0x109>
 5fa:	60 81       	ld	r22, Z
 5fc:	71 81       	ldd	r23, Z+1	; 0x01
 5fe:	82 81       	ldd	r24, Z+2	; 0x02
 600:	93 81       	ldd	r25, Z+3	; 0x03
 602:	0c 5f       	subi	r16, 0xFC	; 252
 604:	1f 4f       	sbci	r17, 0xFF	; 255
 606:	08 c0       	rjmp	.+16     	; 0x618 <__stack+0x119>
 608:	60 81       	ld	r22, Z
 60a:	71 81       	ldd	r23, Z+1	; 0x01
 60c:	07 2e       	mov	r0, r23
 60e:	00 0c       	add	r0, r0
 610:	88 0b       	sbc	r24, r24
 612:	99 0b       	sbc	r25, r25
 614:	0e 5f       	subi	r16, 0xFE	; 254
 616:	1f 4f       	sbci	r17, 0xFF	; 255
 618:	f3 2d       	mov	r31, r3
 61a:	ff 76       	andi	r31, 0x6F	; 111
 61c:	3f 2e       	mov	r3, r31
 61e:	97 ff       	sbrs	r25, 7
 620:	09 c0       	rjmp	.+18     	; 0x634 <__stack+0x135>
 622:	90 95       	com	r25
 624:	80 95       	com	r24
 626:	70 95       	com	r23
 628:	61 95       	neg	r22
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	f0 68       	ori	r31, 0x80	; 128
 632:	3f 2e       	mov	r3, r31
 634:	2a e0       	ldi	r18, 0x0A	; 10
 636:	30 e0       	ldi	r19, 0x00	; 0
 638:	a3 01       	movw	r20, r6
 63a:	0e 94 44 04 	call	0x888	; 0x888 <__ultoa_invert>
 63e:	88 2e       	mov	r8, r24
 640:	86 18       	sub	r8, r6
 642:	45 c0       	rjmp	.+138    	; 0x6ce <__stack+0x1cf>
 644:	85 37       	cpi	r24, 0x75	; 117
 646:	31 f4       	brne	.+12     	; 0x654 <__stack+0x155>
 648:	23 2d       	mov	r18, r3
 64a:	2f 7e       	andi	r18, 0xEF	; 239
 64c:	b2 2e       	mov	r11, r18
 64e:	2a e0       	ldi	r18, 0x0A	; 10
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	25 c0       	rjmp	.+74     	; 0x69e <__stack+0x19f>
 654:	93 2d       	mov	r25, r3
 656:	99 7f       	andi	r25, 0xF9	; 249
 658:	b9 2e       	mov	r11, r25
 65a:	8f 36       	cpi	r24, 0x6F	; 111
 65c:	c1 f0       	breq	.+48     	; 0x68e <__stack+0x18f>
 65e:	18 f4       	brcc	.+6      	; 0x666 <__stack+0x167>
 660:	88 35       	cpi	r24, 0x58	; 88
 662:	79 f0       	breq	.+30     	; 0x682 <__stack+0x183>
 664:	b5 c0       	rjmp	.+362    	; 0x7d0 <__stack+0x2d1>
 666:	80 37       	cpi	r24, 0x70	; 112
 668:	19 f0       	breq	.+6      	; 0x670 <__stack+0x171>
 66a:	88 37       	cpi	r24, 0x78	; 120
 66c:	21 f0       	breq	.+8      	; 0x676 <__stack+0x177>
 66e:	b0 c0       	rjmp	.+352    	; 0x7d0 <__stack+0x2d1>
 670:	e9 2f       	mov	r30, r25
 672:	e0 61       	ori	r30, 0x10	; 16
 674:	be 2e       	mov	r11, r30
 676:	b4 fe       	sbrs	r11, 4
 678:	0d c0       	rjmp	.+26     	; 0x694 <__stack+0x195>
 67a:	fb 2d       	mov	r31, r11
 67c:	f4 60       	ori	r31, 0x04	; 4
 67e:	bf 2e       	mov	r11, r31
 680:	09 c0       	rjmp	.+18     	; 0x694 <__stack+0x195>
 682:	34 fe       	sbrs	r3, 4
 684:	0a c0       	rjmp	.+20     	; 0x69a <__stack+0x19b>
 686:	29 2f       	mov	r18, r25
 688:	26 60       	ori	r18, 0x06	; 6
 68a:	b2 2e       	mov	r11, r18
 68c:	06 c0       	rjmp	.+12     	; 0x69a <__stack+0x19b>
 68e:	28 e0       	ldi	r18, 0x08	; 8
 690:	30 e0       	ldi	r19, 0x00	; 0
 692:	05 c0       	rjmp	.+10     	; 0x69e <__stack+0x19f>
 694:	20 e1       	ldi	r18, 0x10	; 16
 696:	30 e0       	ldi	r19, 0x00	; 0
 698:	02 c0       	rjmp	.+4      	; 0x69e <__stack+0x19f>
 69a:	20 e1       	ldi	r18, 0x10	; 16
 69c:	32 e0       	ldi	r19, 0x02	; 2
 69e:	f8 01       	movw	r30, r16
 6a0:	b7 fe       	sbrs	r11, 7
 6a2:	07 c0       	rjmp	.+14     	; 0x6b2 <__stack+0x1b3>
 6a4:	60 81       	ld	r22, Z
 6a6:	71 81       	ldd	r23, Z+1	; 0x01
 6a8:	82 81       	ldd	r24, Z+2	; 0x02
 6aa:	93 81       	ldd	r25, Z+3	; 0x03
 6ac:	0c 5f       	subi	r16, 0xFC	; 252
 6ae:	1f 4f       	sbci	r17, 0xFF	; 255
 6b0:	06 c0       	rjmp	.+12     	; 0x6be <__stack+0x1bf>
 6b2:	60 81       	ld	r22, Z
 6b4:	71 81       	ldd	r23, Z+1	; 0x01
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	90 e0       	ldi	r25, 0x00	; 0
 6ba:	0e 5f       	subi	r16, 0xFE	; 254
 6bc:	1f 4f       	sbci	r17, 0xFF	; 255
 6be:	a3 01       	movw	r20, r6
 6c0:	0e 94 44 04 	call	0x888	; 0x888 <__ultoa_invert>
 6c4:	88 2e       	mov	r8, r24
 6c6:	86 18       	sub	r8, r6
 6c8:	fb 2d       	mov	r31, r11
 6ca:	ff 77       	andi	r31, 0x7F	; 127
 6cc:	3f 2e       	mov	r3, r31
 6ce:	36 fe       	sbrs	r3, 6
 6d0:	0d c0       	rjmp	.+26     	; 0x6ec <__stack+0x1ed>
 6d2:	23 2d       	mov	r18, r3
 6d4:	2e 7f       	andi	r18, 0xFE	; 254
 6d6:	a2 2e       	mov	r10, r18
 6d8:	89 14       	cp	r8, r9
 6da:	58 f4       	brcc	.+22     	; 0x6f2 <__stack+0x1f3>
 6dc:	34 fe       	sbrs	r3, 4
 6de:	0b c0       	rjmp	.+22     	; 0x6f6 <__stack+0x1f7>
 6e0:	32 fc       	sbrc	r3, 2
 6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <__stack+0x1f7>
 6e4:	83 2d       	mov	r24, r3
 6e6:	8e 7e       	andi	r24, 0xEE	; 238
 6e8:	a8 2e       	mov	r10, r24
 6ea:	05 c0       	rjmp	.+10     	; 0x6f6 <__stack+0x1f7>
 6ec:	b8 2c       	mov	r11, r8
 6ee:	a3 2c       	mov	r10, r3
 6f0:	03 c0       	rjmp	.+6      	; 0x6f8 <__stack+0x1f9>
 6f2:	b8 2c       	mov	r11, r8
 6f4:	01 c0       	rjmp	.+2      	; 0x6f8 <__stack+0x1f9>
 6f6:	b9 2c       	mov	r11, r9
 6f8:	a4 fe       	sbrs	r10, 4
 6fa:	0f c0       	rjmp	.+30     	; 0x71a <__stack+0x21b>
 6fc:	fe 01       	movw	r30, r28
 6fe:	e8 0d       	add	r30, r8
 700:	f1 1d       	adc	r31, r1
 702:	80 81       	ld	r24, Z
 704:	80 33       	cpi	r24, 0x30	; 48
 706:	21 f4       	brne	.+8      	; 0x710 <__stack+0x211>
 708:	9a 2d       	mov	r25, r10
 70a:	99 7e       	andi	r25, 0xE9	; 233
 70c:	a9 2e       	mov	r10, r25
 70e:	09 c0       	rjmp	.+18     	; 0x722 <__stack+0x223>
 710:	a2 fe       	sbrs	r10, 2
 712:	06 c0       	rjmp	.+12     	; 0x720 <__stack+0x221>
 714:	b3 94       	inc	r11
 716:	b3 94       	inc	r11
 718:	04 c0       	rjmp	.+8      	; 0x722 <__stack+0x223>
 71a:	8a 2d       	mov	r24, r10
 71c:	86 78       	andi	r24, 0x86	; 134
 71e:	09 f0       	breq	.+2      	; 0x722 <__stack+0x223>
 720:	b3 94       	inc	r11
 722:	a3 fc       	sbrc	r10, 3
 724:	11 c0       	rjmp	.+34     	; 0x748 <__stack+0x249>
 726:	a0 fe       	sbrs	r10, 0
 728:	06 c0       	rjmp	.+12     	; 0x736 <__stack+0x237>
 72a:	b2 14       	cp	r11, r2
 72c:	88 f4       	brcc	.+34     	; 0x750 <__stack+0x251>
 72e:	28 0c       	add	r2, r8
 730:	92 2c       	mov	r9, r2
 732:	9b 18       	sub	r9, r11
 734:	0e c0       	rjmp	.+28     	; 0x752 <__stack+0x253>
 736:	b2 14       	cp	r11, r2
 738:	60 f4       	brcc	.+24     	; 0x752 <__stack+0x253>
 73a:	b6 01       	movw	r22, r12
 73c:	80 e2       	ldi	r24, 0x20	; 32
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 744:	b3 94       	inc	r11
 746:	f7 cf       	rjmp	.-18     	; 0x736 <__stack+0x237>
 748:	b2 14       	cp	r11, r2
 74a:	18 f4       	brcc	.+6      	; 0x752 <__stack+0x253>
 74c:	2b 18       	sub	r2, r11
 74e:	02 c0       	rjmp	.+4      	; 0x754 <__stack+0x255>
 750:	98 2c       	mov	r9, r8
 752:	21 2c       	mov	r2, r1
 754:	a4 fe       	sbrs	r10, 4
 756:	10 c0       	rjmp	.+32     	; 0x778 <__stack+0x279>
 758:	b6 01       	movw	r22, r12
 75a:	80 e3       	ldi	r24, 0x30	; 48
 75c:	90 e0       	ldi	r25, 0x00	; 0
 75e:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 762:	a2 fe       	sbrs	r10, 2
 764:	17 c0       	rjmp	.+46     	; 0x794 <__stack+0x295>
 766:	a1 fc       	sbrc	r10, 1
 768:	03 c0       	rjmp	.+6      	; 0x770 <__stack+0x271>
 76a:	88 e7       	ldi	r24, 0x78	; 120
 76c:	90 e0       	ldi	r25, 0x00	; 0
 76e:	02 c0       	rjmp	.+4      	; 0x774 <__stack+0x275>
 770:	88 e5       	ldi	r24, 0x58	; 88
 772:	90 e0       	ldi	r25, 0x00	; 0
 774:	b6 01       	movw	r22, r12
 776:	0c c0       	rjmp	.+24     	; 0x790 <__stack+0x291>
 778:	8a 2d       	mov	r24, r10
 77a:	86 78       	andi	r24, 0x86	; 134
 77c:	59 f0       	breq	.+22     	; 0x794 <__stack+0x295>
 77e:	a1 fe       	sbrs	r10, 1
 780:	02 c0       	rjmp	.+4      	; 0x786 <__stack+0x287>
 782:	8b e2       	ldi	r24, 0x2B	; 43
 784:	01 c0       	rjmp	.+2      	; 0x788 <__stack+0x289>
 786:	80 e2       	ldi	r24, 0x20	; 32
 788:	a7 fc       	sbrc	r10, 7
 78a:	8d e2       	ldi	r24, 0x2D	; 45
 78c:	b6 01       	movw	r22, r12
 78e:	90 e0       	ldi	r25, 0x00	; 0
 790:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 794:	89 14       	cp	r8, r9
 796:	38 f4       	brcc	.+14     	; 0x7a6 <__stack+0x2a7>
 798:	b6 01       	movw	r22, r12
 79a:	80 e3       	ldi	r24, 0x30	; 48
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 7a2:	9a 94       	dec	r9
 7a4:	f7 cf       	rjmp	.-18     	; 0x794 <__stack+0x295>
 7a6:	8a 94       	dec	r8
 7a8:	f3 01       	movw	r30, r6
 7aa:	e8 0d       	add	r30, r8
 7ac:	f1 1d       	adc	r31, r1
 7ae:	80 81       	ld	r24, Z
 7b0:	b6 01       	movw	r22, r12
 7b2:	90 e0       	ldi	r25, 0x00	; 0
 7b4:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 7b8:	81 10       	cpse	r8, r1
 7ba:	f5 cf       	rjmp	.-22     	; 0x7a6 <__stack+0x2a7>
 7bc:	22 20       	and	r2, r2
 7be:	09 f4       	brne	.+2      	; 0x7c2 <__stack+0x2c3>
 7c0:	42 ce       	rjmp	.-892    	; 0x446 <vfprintf+0x24>
 7c2:	b6 01       	movw	r22, r12
 7c4:	80 e2       	ldi	r24, 0x20	; 32
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	0e 94 08 04 	call	0x810	; 0x810 <fputc>
 7cc:	2a 94       	dec	r2
 7ce:	f6 cf       	rjmp	.-20     	; 0x7bc <__stack+0x2bd>
 7d0:	f6 01       	movw	r30, r12
 7d2:	86 81       	ldd	r24, Z+6	; 0x06
 7d4:	97 81       	ldd	r25, Z+7	; 0x07
 7d6:	02 c0       	rjmp	.+4      	; 0x7dc <__stack+0x2dd>
 7d8:	8f ef       	ldi	r24, 0xFF	; 255
 7da:	9f ef       	ldi	r25, 0xFF	; 255
 7dc:	2b 96       	adiw	r28, 0x0b	; 11
 7de:	e2 e1       	ldi	r30, 0x12	; 18
 7e0:	0c 94 f0 04 	jmp	0x9e0	; 0x9e0 <__epilogue_restores__>

000007e4 <strnlen_P>:
 7e4:	fc 01       	movw	r30, r24
 7e6:	05 90       	lpm	r0, Z+
 7e8:	61 50       	subi	r22, 0x01	; 1
 7ea:	70 40       	sbci	r23, 0x00	; 0
 7ec:	01 10       	cpse	r0, r1
 7ee:	d8 f7       	brcc	.-10     	; 0x7e6 <strnlen_P+0x2>
 7f0:	80 95       	com	r24
 7f2:	90 95       	com	r25
 7f4:	8e 0f       	add	r24, r30
 7f6:	9f 1f       	adc	r25, r31
 7f8:	08 95       	ret

000007fa <strnlen>:
 7fa:	fc 01       	movw	r30, r24
 7fc:	61 50       	subi	r22, 0x01	; 1
 7fe:	70 40       	sbci	r23, 0x00	; 0
 800:	01 90       	ld	r0, Z+
 802:	01 10       	cpse	r0, r1
 804:	d8 f7       	brcc	.-10     	; 0x7fc <strnlen+0x2>
 806:	80 95       	com	r24
 808:	90 95       	com	r25
 80a:	8e 0f       	add	r24, r30
 80c:	9f 1f       	adc	r25, r31
 80e:	08 95       	ret

00000810 <fputc>:
 810:	0f 93       	push	r16
 812:	1f 93       	push	r17
 814:	cf 93       	push	r28
 816:	df 93       	push	r29
 818:	fb 01       	movw	r30, r22
 81a:	23 81       	ldd	r18, Z+3	; 0x03
 81c:	21 fd       	sbrc	r18, 1
 81e:	03 c0       	rjmp	.+6      	; 0x826 <fputc+0x16>
 820:	8f ef       	ldi	r24, 0xFF	; 255
 822:	9f ef       	ldi	r25, 0xFF	; 255
 824:	2c c0       	rjmp	.+88     	; 0x87e <fputc+0x6e>
 826:	22 ff       	sbrs	r18, 2
 828:	16 c0       	rjmp	.+44     	; 0x856 <fputc+0x46>
 82a:	46 81       	ldd	r20, Z+6	; 0x06
 82c:	57 81       	ldd	r21, Z+7	; 0x07
 82e:	24 81       	ldd	r18, Z+4	; 0x04
 830:	35 81       	ldd	r19, Z+5	; 0x05
 832:	42 17       	cp	r20, r18
 834:	53 07       	cpc	r21, r19
 836:	44 f4       	brge	.+16     	; 0x848 <fputc+0x38>
 838:	a0 81       	ld	r26, Z
 83a:	b1 81       	ldd	r27, Z+1	; 0x01
 83c:	9d 01       	movw	r18, r26
 83e:	2f 5f       	subi	r18, 0xFF	; 255
 840:	3f 4f       	sbci	r19, 0xFF	; 255
 842:	31 83       	std	Z+1, r19	; 0x01
 844:	20 83       	st	Z, r18
 846:	8c 93       	st	X, r24
 848:	26 81       	ldd	r18, Z+6	; 0x06
 84a:	37 81       	ldd	r19, Z+7	; 0x07
 84c:	2f 5f       	subi	r18, 0xFF	; 255
 84e:	3f 4f       	sbci	r19, 0xFF	; 255
 850:	37 83       	std	Z+7, r19	; 0x07
 852:	26 83       	std	Z+6, r18	; 0x06
 854:	14 c0       	rjmp	.+40     	; 0x87e <fputc+0x6e>
 856:	8b 01       	movw	r16, r22
 858:	ec 01       	movw	r28, r24
 85a:	fb 01       	movw	r30, r22
 85c:	00 84       	ldd	r0, Z+8	; 0x08
 85e:	f1 85       	ldd	r31, Z+9	; 0x09
 860:	e0 2d       	mov	r30, r0
 862:	09 95       	icall
 864:	89 2b       	or	r24, r25
 866:	e1 f6       	brne	.-72     	; 0x820 <fputc+0x10>
 868:	d8 01       	movw	r26, r16
 86a:	16 96       	adiw	r26, 0x06	; 6
 86c:	8d 91       	ld	r24, X+
 86e:	9c 91       	ld	r25, X
 870:	17 97       	sbiw	r26, 0x07	; 7
 872:	01 96       	adiw	r24, 0x01	; 1
 874:	17 96       	adiw	r26, 0x07	; 7
 876:	9c 93       	st	X, r25
 878:	8e 93       	st	-X, r24
 87a:	16 97       	sbiw	r26, 0x06	; 6
 87c:	ce 01       	movw	r24, r28
 87e:	df 91       	pop	r29
 880:	cf 91       	pop	r28
 882:	1f 91       	pop	r17
 884:	0f 91       	pop	r16
 886:	08 95       	ret

00000888 <__ultoa_invert>:
 888:	fa 01       	movw	r30, r20
 88a:	aa 27       	eor	r26, r26
 88c:	28 30       	cpi	r18, 0x08	; 8
 88e:	51 f1       	breq	.+84     	; 0x8e4 <__ultoa_invert+0x5c>
 890:	20 31       	cpi	r18, 0x10	; 16
 892:	81 f1       	breq	.+96     	; 0x8f4 <__ultoa_invert+0x6c>
 894:	e8 94       	clt
 896:	6f 93       	push	r22
 898:	6e 7f       	andi	r22, 0xFE	; 254
 89a:	6e 5f       	subi	r22, 0xFE	; 254
 89c:	7f 4f       	sbci	r23, 0xFF	; 255
 89e:	8f 4f       	sbci	r24, 0xFF	; 255
 8a0:	9f 4f       	sbci	r25, 0xFF	; 255
 8a2:	af 4f       	sbci	r26, 0xFF	; 255
 8a4:	b1 e0       	ldi	r27, 0x01	; 1
 8a6:	3e d0       	rcall	.+124    	; 0x924 <__ultoa_invert+0x9c>
 8a8:	b4 e0       	ldi	r27, 0x04	; 4
 8aa:	3c d0       	rcall	.+120    	; 0x924 <__ultoa_invert+0x9c>
 8ac:	67 0f       	add	r22, r23
 8ae:	78 1f       	adc	r23, r24
 8b0:	89 1f       	adc	r24, r25
 8b2:	9a 1f       	adc	r25, r26
 8b4:	a1 1d       	adc	r26, r1
 8b6:	68 0f       	add	r22, r24
 8b8:	79 1f       	adc	r23, r25
 8ba:	8a 1f       	adc	r24, r26
 8bc:	91 1d       	adc	r25, r1
 8be:	a1 1d       	adc	r26, r1
 8c0:	6a 0f       	add	r22, r26
 8c2:	71 1d       	adc	r23, r1
 8c4:	81 1d       	adc	r24, r1
 8c6:	91 1d       	adc	r25, r1
 8c8:	a1 1d       	adc	r26, r1
 8ca:	20 d0       	rcall	.+64     	; 0x90c <__ultoa_invert+0x84>
 8cc:	09 f4       	brne	.+2      	; 0x8d0 <__ultoa_invert+0x48>
 8ce:	68 94       	set
 8d0:	3f 91       	pop	r19
 8d2:	2a e0       	ldi	r18, 0x0A	; 10
 8d4:	26 9f       	mul	r18, r22
 8d6:	11 24       	eor	r1, r1
 8d8:	30 19       	sub	r19, r0
 8da:	30 5d       	subi	r19, 0xD0	; 208
 8dc:	31 93       	st	Z+, r19
 8de:	de f6       	brtc	.-74     	; 0x896 <__ultoa_invert+0xe>
 8e0:	cf 01       	movw	r24, r30
 8e2:	08 95       	ret
 8e4:	46 2f       	mov	r20, r22
 8e6:	47 70       	andi	r20, 0x07	; 7
 8e8:	40 5d       	subi	r20, 0xD0	; 208
 8ea:	41 93       	st	Z+, r20
 8ec:	b3 e0       	ldi	r27, 0x03	; 3
 8ee:	0f d0       	rcall	.+30     	; 0x90e <__ultoa_invert+0x86>
 8f0:	c9 f7       	brne	.-14     	; 0x8e4 <__ultoa_invert+0x5c>
 8f2:	f6 cf       	rjmp	.-20     	; 0x8e0 <__ultoa_invert+0x58>
 8f4:	46 2f       	mov	r20, r22
 8f6:	4f 70       	andi	r20, 0x0F	; 15
 8f8:	40 5d       	subi	r20, 0xD0	; 208
 8fa:	4a 33       	cpi	r20, 0x3A	; 58
 8fc:	18 f0       	brcs	.+6      	; 0x904 <__ultoa_invert+0x7c>
 8fe:	49 5d       	subi	r20, 0xD9	; 217
 900:	31 fd       	sbrc	r19, 1
 902:	40 52       	subi	r20, 0x20	; 32
 904:	41 93       	st	Z+, r20
 906:	02 d0       	rcall	.+4      	; 0x90c <__ultoa_invert+0x84>
 908:	a9 f7       	brne	.-22     	; 0x8f4 <__ultoa_invert+0x6c>
 90a:	ea cf       	rjmp	.-44     	; 0x8e0 <__ultoa_invert+0x58>
 90c:	b4 e0       	ldi	r27, 0x04	; 4
 90e:	a6 95       	lsr	r26
 910:	97 95       	ror	r25
 912:	87 95       	ror	r24
 914:	77 95       	ror	r23
 916:	67 95       	ror	r22
 918:	ba 95       	dec	r27
 91a:	c9 f7       	brne	.-14     	; 0x90e <__ultoa_invert+0x86>
 91c:	00 97       	sbiw	r24, 0x00	; 0
 91e:	61 05       	cpc	r22, r1
 920:	71 05       	cpc	r23, r1
 922:	08 95       	ret
 924:	9b 01       	movw	r18, r22
 926:	ac 01       	movw	r20, r24
 928:	0a 2e       	mov	r0, r26
 92a:	06 94       	lsr	r0
 92c:	57 95       	ror	r21
 92e:	47 95       	ror	r20
 930:	37 95       	ror	r19
 932:	27 95       	ror	r18
 934:	ba 95       	dec	r27
 936:	c9 f7       	brne	.-14     	; 0x92a <__ultoa_invert+0xa2>
 938:	62 0f       	add	r22, r18
 93a:	73 1f       	adc	r23, r19
 93c:	84 1f       	adc	r24, r20
 93e:	95 1f       	adc	r25, r21
 940:	a0 1d       	adc	r26, r0
 942:	08 95       	ret

00000944 <__divmodsi4>:
 944:	05 2e       	mov	r0, r21
 946:	97 fb       	bst	r25, 7
 948:	1e f4       	brtc	.+6      	; 0x950 <__divmodsi4+0xc>
 94a:	00 94       	com	r0
 94c:	0e 94 b9 04 	call	0x972	; 0x972 <__negsi2>
 950:	57 fd       	sbrc	r21, 7
 952:	07 d0       	rcall	.+14     	; 0x962 <__divmodsi4_neg2>
 954:	0e 94 0b 05 	call	0xa16	; 0xa16 <__udivmodsi4>
 958:	07 fc       	sbrc	r0, 7
 95a:	03 d0       	rcall	.+6      	; 0x962 <__divmodsi4_neg2>
 95c:	4e f4       	brtc	.+18     	; 0x970 <__divmodsi4_exit>
 95e:	0c 94 b9 04 	jmp	0x972	; 0x972 <__negsi2>

00000962 <__divmodsi4_neg2>:
 962:	50 95       	com	r21
 964:	40 95       	com	r20
 966:	30 95       	com	r19
 968:	21 95       	neg	r18
 96a:	3f 4f       	sbci	r19, 0xFF	; 255
 96c:	4f 4f       	sbci	r20, 0xFF	; 255
 96e:	5f 4f       	sbci	r21, 0xFF	; 255

00000970 <__divmodsi4_exit>:
 970:	08 95       	ret

00000972 <__negsi2>:
 972:	90 95       	com	r25
 974:	80 95       	com	r24
 976:	70 95       	com	r23
 978:	61 95       	neg	r22
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__muluhisi3>:
 982:	0e 94 2d 05 	call	0xa5a	; 0xa5a <__umulhisi3>
 986:	a5 9f       	mul	r26, r21
 988:	90 0d       	add	r25, r0
 98a:	b4 9f       	mul	r27, r20
 98c:	90 0d       	add	r25, r0
 98e:	a4 9f       	mul	r26, r20
 990:	80 0d       	add	r24, r0
 992:	91 1d       	adc	r25, r1
 994:	11 24       	eor	r1, r1
 996:	08 95       	ret

00000998 <__mulshisi3>:
 998:	b7 ff       	sbrs	r27, 7
 99a:	0c 94 c1 04 	jmp	0x982	; 0x982 <__muluhisi3>

0000099e <__mulohisi3>:
 99e:	0e 94 c1 04 	call	0x982	; 0x982 <__muluhisi3>
 9a2:	82 1b       	sub	r24, r18
 9a4:	93 0b       	sbc	r25, r19
 9a6:	08 95       	ret

000009a8 <__prologue_saves__>:
 9a8:	2f 92       	push	r2
 9aa:	3f 92       	push	r3
 9ac:	4f 92       	push	r4
 9ae:	5f 92       	push	r5
 9b0:	6f 92       	push	r6
 9b2:	7f 92       	push	r7
 9b4:	8f 92       	push	r8
 9b6:	9f 92       	push	r9
 9b8:	af 92       	push	r10
 9ba:	bf 92       	push	r11
 9bc:	cf 92       	push	r12
 9be:	df 92       	push	r13
 9c0:	ef 92       	push	r14
 9c2:	ff 92       	push	r15
 9c4:	0f 93       	push	r16
 9c6:	1f 93       	push	r17
 9c8:	cf 93       	push	r28
 9ca:	df 93       	push	r29
 9cc:	cd b7       	in	r28, 0x3d	; 61
 9ce:	de b7       	in	r29, 0x3e	; 62
 9d0:	ca 1b       	sub	r28, r26
 9d2:	db 0b       	sbc	r29, r27
 9d4:	0f b6       	in	r0, 0x3f	; 63
 9d6:	f8 94       	cli
 9d8:	de bf       	out	0x3e, r29	; 62
 9da:	0f be       	out	0x3f, r0	; 63
 9dc:	cd bf       	out	0x3d, r28	; 61
 9de:	09 94       	ijmp

000009e0 <__epilogue_restores__>:
 9e0:	2a 88       	ldd	r2, Y+18	; 0x12
 9e2:	39 88       	ldd	r3, Y+17	; 0x11
 9e4:	48 88       	ldd	r4, Y+16	; 0x10
 9e6:	5f 84       	ldd	r5, Y+15	; 0x0f
 9e8:	6e 84       	ldd	r6, Y+14	; 0x0e
 9ea:	7d 84       	ldd	r7, Y+13	; 0x0d
 9ec:	8c 84       	ldd	r8, Y+12	; 0x0c
 9ee:	9b 84       	ldd	r9, Y+11	; 0x0b
 9f0:	aa 84       	ldd	r10, Y+10	; 0x0a
 9f2:	b9 84       	ldd	r11, Y+9	; 0x09
 9f4:	c8 84       	ldd	r12, Y+8	; 0x08
 9f6:	df 80       	ldd	r13, Y+7	; 0x07
 9f8:	ee 80       	ldd	r14, Y+6	; 0x06
 9fa:	fd 80       	ldd	r15, Y+5	; 0x05
 9fc:	0c 81       	ldd	r16, Y+4	; 0x04
 9fe:	1b 81       	ldd	r17, Y+3	; 0x03
 a00:	aa 81       	ldd	r26, Y+2	; 0x02
 a02:	b9 81       	ldd	r27, Y+1	; 0x01
 a04:	ce 0f       	add	r28, r30
 a06:	d1 1d       	adc	r29, r1
 a08:	0f b6       	in	r0, 0x3f	; 63
 a0a:	f8 94       	cli
 a0c:	de bf       	out	0x3e, r29	; 62
 a0e:	0f be       	out	0x3f, r0	; 63
 a10:	cd bf       	out	0x3d, r28	; 61
 a12:	ed 01       	movw	r28, r26
 a14:	08 95       	ret

00000a16 <__udivmodsi4>:
 a16:	a1 e2       	ldi	r26, 0x21	; 33
 a18:	1a 2e       	mov	r1, r26
 a1a:	aa 1b       	sub	r26, r26
 a1c:	bb 1b       	sub	r27, r27
 a1e:	fd 01       	movw	r30, r26
 a20:	0d c0       	rjmp	.+26     	; 0xa3c <__udivmodsi4_ep>

00000a22 <__udivmodsi4_loop>:
 a22:	aa 1f       	adc	r26, r26
 a24:	bb 1f       	adc	r27, r27
 a26:	ee 1f       	adc	r30, r30
 a28:	ff 1f       	adc	r31, r31
 a2a:	a2 17       	cp	r26, r18
 a2c:	b3 07       	cpc	r27, r19
 a2e:	e4 07       	cpc	r30, r20
 a30:	f5 07       	cpc	r31, r21
 a32:	20 f0       	brcs	.+8      	; 0xa3c <__udivmodsi4_ep>
 a34:	a2 1b       	sub	r26, r18
 a36:	b3 0b       	sbc	r27, r19
 a38:	e4 0b       	sbc	r30, r20
 a3a:	f5 0b       	sbc	r31, r21

00000a3c <__udivmodsi4_ep>:
 a3c:	66 1f       	adc	r22, r22
 a3e:	77 1f       	adc	r23, r23
 a40:	88 1f       	adc	r24, r24
 a42:	99 1f       	adc	r25, r25
 a44:	1a 94       	dec	r1
 a46:	69 f7       	brne	.-38     	; 0xa22 <__udivmodsi4_loop>
 a48:	60 95       	com	r22
 a4a:	70 95       	com	r23
 a4c:	80 95       	com	r24
 a4e:	90 95       	com	r25
 a50:	9b 01       	movw	r18, r22
 a52:	ac 01       	movw	r20, r24
 a54:	bd 01       	movw	r22, r26
 a56:	cf 01       	movw	r24, r30
 a58:	08 95       	ret

00000a5a <__umulhisi3>:
 a5a:	a2 9f       	mul	r26, r18
 a5c:	b0 01       	movw	r22, r0
 a5e:	b3 9f       	mul	r27, r19
 a60:	c0 01       	movw	r24, r0
 a62:	a3 9f       	mul	r26, r19
 a64:	70 0d       	add	r23, r0
 a66:	81 1d       	adc	r24, r1
 a68:	11 24       	eor	r1, r1
 a6a:	91 1d       	adc	r25, r1
 a6c:	b2 9f       	mul	r27, r18
 a6e:	70 0d       	add	r23, r0
 a70:	81 1d       	adc	r24, r1
 a72:	11 24       	eor	r1, r1
 a74:	91 1d       	adc	r25, r1
 a76:	08 95       	ret

00000a78 <_exit>:
 a78:	f8 94       	cli

00000a7a <__stop_program>:
 a7a:	ff cf       	rjmp	.-2      	; 0xa7a <__stop_program>
